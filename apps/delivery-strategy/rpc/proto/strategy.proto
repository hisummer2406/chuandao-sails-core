syntax = "proto3";

package strategy;

option go_package = "./delivery-strategy";

// 配送策略服务
service V1 {
  // 获取配送策略配置
  rpc GetStrategyConfig(GetStrategyConfigReq) returns (GetStrategyConfigResp);
  // 更新配送策略配置
//  rpc UpdateStrategyConfig(UpdateStrategyConfigReq) returns (UpdateStrategyConfigResp);
  // 获取城市特殊配置
  rpc GetCityConfig(GetCityConfigReq) returns (GetCityConfigResp);
  // 更新城市特殊配置
//  rpc UpdateCityConfig(UpdateCityConfigReq) returns (UpdateCityConfigResp);
  // 计算配送报价
  rpc CalculateQuote(CalculateQuoteReq) returns (CalculateQuoteResp);
  // 选择最优配送平台
  rpc SelectBestPlatform(SelectBestPlatformReq) returns (SelectBestPlatformResp);
}

// 请求消息定义
message GetStrategyConfigReq {
  string city_code = 1; // 城市编码，为空则返回默认配置
}

message GetCityConfigReq {
  string city_code = 1;
}

message CalculateQuoteReq {
  string city_code = 1;
  string platform_id = 2; // 平台ID，为空则计算所有平台
  DeliveryOrderInfo order_info = 3;
}

message SelectBestPlatformReq {
  string city_code = 1;
  DeliveryOrderInfo order_info = 2;
  string strategy_type = 3; // price_priority, time_priority, reliability_priority, hybrid
}

// 响应消息定义
message GetStrategyConfigResp {
  int32 code = 1;
  string message = 2;
  DeliveryStrategyConfig data = 3;
}

message GetCityConfigResp {
  int32 code = 1;
  string message = 2;
  CitySpecificConfig data = 3;
}

message CalculateQuoteResp {
  int32 code = 1;
  string message = 2;
  repeated PlatformQuote quotes = 3;
}

message SelectBestPlatformResp {
  int32 code = 1;
  string message = 2;
  PlatformSelection selection = 3;
}

// 核心数据结构
message DeliveryStrategyConfig {
  string version = 1;
  string update_time = 2;
  DefaultConfig default_config = 3;
  map<string, CitySpecificConfig> city_specific_configs = 4;
  GlobalSettings global_settings = 5;
}

message DefaultConfig {
  bool enabled = 1;
  string strategy_type = 2;
  bool fallback_enabled = 3;
  int32 max_retry_times = 4;
  int32 timeout_seconds = 5;
  map<string, PlatformConfig> platforms = 6;
  StrategyRules strategy_rules = 7;
  BusinessRules business_rules = 8;
}

message CitySpecificConfig {
  string city_code = 1;
  string city_name = 2;
  bool enabled = 3;
  string strategy_type = 4;
  bool inherit_default = 5; // 是否继承默认配置
  map<string, PlatformConfig> platforms = 6;
  BusinessRules business_rules = 7;
  ConfigOverrides overrides = 8; // 覆盖配置
}

message ConfigOverrides {
  map<string, PlatformConfig> platforms = 1;
  BusinessRules business_rules = 2;
}

message PlatformConfig {
  string platform_id = 1;
  string platform_name = 2;
  bool enabled = 3;
  int32 priority = 4;
  int32 weight = 5;
  string reason = 6; // 禁用原因
  PricingConfig pricing = 7;
  ServiceConfig service_config = 8;
  ApiConfig api_config = 9;
}

message PricingConfig {
  double base_price = 1;
  double distance_price_per_km = 2;
  double weight_price_per_kg = 3;
  TimeMultiplier time_multiplier = 4;
}

message TimeMultiplier {
  double peak_hours = 1;
  double normal_hours = 2;
  double off_peak_hours = 3;
}

message ServiceConfig {
  double max_distance_km = 1;
  double max_weight_kg = 2;
  int32 estimated_delivery_time_minutes = 3;
  bool support_cod = 4;
  bool support_fragile = 5;
  bool support_cold_chain = 6;
}

message ApiConfig {
  string endpoint = 1;
  int32 timeout_ms = 2;
  int32 retry_times = 3;
  AuthConfig auth = 4;
}

message AuthConfig {
  string type = 1; // api_key, oauth2, signature
  string key_field = 2;
  string token_endpoint = 3;
  string secret_key_field = 4;
}

message StrategyRules {
  PriorityRule price_priority = 1;
  PriorityRule time_priority = 2;
  PriorityRule reliability_priority = 3;
}

message PriorityRule {
  bool enabled = 1;
  double weight = 2;
  bool consider_service_fee = 3; // 价格策略专用
  int32 max_acceptable_delay_minutes = 4; // 时效策略专用
  double min_success_rate = 5; // 可靠性策略专用
}

message BusinessRules {
  repeated string peak_hours = 1;
  bool blacklist_check = 2;
  double distance_limit_km = 3;
  double weight_limit_kg = 4;
  double cod_limit_amount = 5;
  bool weather_adjustment = 6;
  double rainy_day_multiplier = 7;
  repeated SpecialZone special_zones = 8;
}

message SpecialZone {
  string zone_name = 1;
  repeated Coordinate coordinates = 2;
  double additional_fee = 3;
  repeated string priority_platforms = 4;
  string preferred_platform = 5;
}

message Coordinate {
  double longitude = 1;
  double latitude = 2;
}

message GlobalSettings {
  MonitoringConfig monitoring = 1;
  FallbackStrategy fallback_strategy = 2;
  CacheSettings cache_settings = 3;
  RateLimiting rate_limiting = 4;
}

message MonitoringConfig {
  double success_rate_threshold = 1;
  int32 response_time_threshold_ms = 2;
  repeated string alert_channels = 3;
}

message FallbackStrategy {
  bool enabled = 1;
  repeated string fallback_platforms = 2;
  int32 max_fallback_attempts = 3;
}

message CacheSettings {
  int32 quote_cache_ttl_seconds = 1;
  int32 platform_status_cache_ttl_seconds = 2;
}

message RateLimiting {
  int32 requests_per_minute = 1;
  int32 requests_per_platform_per_minute = 2;
}

// 订单信息
message DeliveryOrderInfo {
  string order_id = 1;
  Address pickup_address = 2;
  Address delivery_address = 3;
  double distance_km = 4;
  double weight_kg = 5;
  double order_amount = 6;
  bool is_cod = 7; // 是否货到付款
  bool is_fragile = 8; // 是否易碎品
  bool need_cold_chain = 9; // 是否需要冷链
  string required_delivery_time = 10; // 要求送达时间
  string order_time = 11; // 下单时间
  map<string, string> extra_info = 12; // 额外信息
}

message Address {
  string province = 1;
  string city = 2;
  string district = 3;
  string detail = 4;
  double longitude = 5;
  double latitude = 6;
  string contact_name = 7;
  string contact_phone = 8;
}

// 报价信息
message PlatformQuote {
  string platform_id = 1;
  string platform_name = 2;
  bool available = 3;
  string unavailable_reason = 4;
  double total_price = 5;
  double base_price = 6;
  double distance_fee = 7;
  double weight_fee = 8;
  double additional_fee = 9;
  int32 estimated_delivery_time_minutes = 10;
  double success_rate = 11;
  string quote_id = 12;
  string quote_time = 13;
  int64 expire_time = 14; // 报价过期时间戳
  map<string, string> extra_info = 15;
}

// 平台选择结果
message PlatformSelection {
  string selected_platform_id = 1;
  string selected_platform_name = 2;
  PlatformQuote selected_quote = 3;
  string selection_reason = 4;
  repeated PlatformQuote alternative_quotes = 5;
  SelectionScore score = 6;
}

message SelectionScore {
  double price_score = 1;
  double time_score = 2;
  double reliability_score = 3;
  double total_score = 4;
  string strategy_type = 5;
}