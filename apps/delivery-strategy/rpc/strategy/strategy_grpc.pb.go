// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: delivery-strategy.proto

package strategy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// V1Client is the client API for V1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type V1Client interface {
	// 获取配送策略配置
	GetStrategyConfig(ctx context.Context, in *GetStrategyConfigReq, opts ...grpc.CallOption) (*GetStrategyConfigResp, error)
	// 更新配送策略配置
	//  rpc UpdateStrategyConfig(UpdateStrategyConfigReq) returns (UpdateStrategyConfigResp);
	// 获取城市特殊配置
	GetCityConfig(ctx context.Context, in *GetCityConfigReq, opts ...grpc.CallOption) (*GetCityConfigResp, error)
	// 更新城市特殊配置
	//  rpc UpdateCityConfig(UpdateCityConfigReq) returns (UpdateCityConfigResp);
	// 计算配送报价
	CalculateQuote(ctx context.Context, in *CalculateQuoteReq, opts ...grpc.CallOption) (*CalculateQuoteResp, error)
	// 选择最优配送平台
	SelectBestPlatform(ctx context.Context, in *SelectBestPlatformReq, opts ...grpc.CallOption) (*SelectBestPlatformResp, error)
}

type v1Client struct {
	cc grpc.ClientConnInterface
}

func NewV1Client(cc grpc.ClientConnInterface) V1Client {
	return &v1Client{cc}
}

func (c *v1Client) GetStrategyConfig(ctx context.Context, in *GetStrategyConfigReq, opts ...grpc.CallOption) (*GetStrategyConfigResp, error) {
	out := new(GetStrategyConfigResp)
	err := c.cc.Invoke(ctx, "/delivery-strategy.V1/GetStrategyConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) GetCityConfig(ctx context.Context, in *GetCityConfigReq, opts ...grpc.CallOption) (*GetCityConfigResp, error) {
	out := new(GetCityConfigResp)
	err := c.cc.Invoke(ctx, "/delivery-strategy.V1/GetCityConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) CalculateQuote(ctx context.Context, in *CalculateQuoteReq, opts ...grpc.CallOption) (*CalculateQuoteResp, error) {
	out := new(CalculateQuoteResp)
	err := c.cc.Invoke(ctx, "/delivery-strategy.V1/CalculateQuote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) SelectBestPlatform(ctx context.Context, in *SelectBestPlatformReq, opts ...grpc.CallOption) (*SelectBestPlatformResp, error) {
	out := new(SelectBestPlatformResp)
	err := c.cc.Invoke(ctx, "/delivery-strategy.V1/SelectBestPlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// V1Server is the server API for V1 service.
// All implementations must embed UnimplementedV1Server
// for forward compatibility
type V1Server interface {
	// 获取配送策略配置
	GetStrategyConfig(context.Context, *GetStrategyConfigReq) (*GetStrategyConfigResp, error)
	// 更新配送策略配置
	//  rpc UpdateStrategyConfig(UpdateStrategyConfigReq) returns (UpdateStrategyConfigResp);
	// 获取城市特殊配置
	GetCityConfig(context.Context, *GetCityConfigReq) (*GetCityConfigResp, error)
	// 更新城市特殊配置
	//  rpc UpdateCityConfig(UpdateCityConfigReq) returns (UpdateCityConfigResp);
	// 计算配送报价
	CalculateQuote(context.Context, *CalculateQuoteReq) (*CalculateQuoteResp, error)
	// 选择最优配送平台
	SelectBestPlatform(context.Context, *SelectBestPlatformReq) (*SelectBestPlatformResp, error)
	mustEmbedUnimplementedV1Server()
}

// UnimplementedV1Server must be embedded to have forward compatible implementations.
type UnimplementedV1Server struct {
}

func (UnimplementedV1Server) GetStrategyConfig(context.Context, *GetStrategyConfigReq) (*GetStrategyConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStrategyConfig not implemented")
}
func (UnimplementedV1Server) GetCityConfig(context.Context, *GetCityConfigReq) (*GetCityConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCityConfig not implemented")
}
func (UnimplementedV1Server) CalculateQuote(context.Context, *CalculateQuoteReq) (*CalculateQuoteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateQuote not implemented")
}
func (UnimplementedV1Server) SelectBestPlatform(context.Context, *SelectBestPlatformReq) (*SelectBestPlatformResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectBestPlatform not implemented")
}
func (UnimplementedV1Server) mustEmbedUnimplementedV1Server() {}

// UnsafeV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to V1Server will
// result in compilation errors.
type UnsafeV1Server interface {
	mustEmbedUnimplementedV1Server()
}

func RegisterV1Server(s grpc.ServiceRegistrar, srv V1Server) {
	s.RegisterService(&V1_ServiceDesc, srv)
}

func _V1_GetStrategyConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStrategyConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).GetStrategyConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delivery-strategy.V1/GetStrategyConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).GetStrategyConfig(ctx, req.(*GetStrategyConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_GetCityConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCityConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).GetCityConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delivery-strategy.V1/GetCityConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).GetCityConfig(ctx, req.(*GetCityConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_CalculateQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateQuoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).CalculateQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delivery-strategy.V1/CalculateQuote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).CalculateQuote(ctx, req.(*CalculateQuoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_SelectBestPlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectBestPlatformReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).SelectBestPlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delivery-strategy.V1/SelectBestPlatform",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).SelectBestPlatform(ctx, req.(*SelectBestPlatformReq))
	}
	return interceptor(ctx, in, info, handler)
}

// V1_ServiceDesc is the grpc.ServiceDesc for V1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var V1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "delivery-strategy.V1",
	HandlerType: (*V1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStrategyConfig",
			Handler:    _V1_GetStrategyConfig_Handler,
		},
		{
			MethodName: "GetCityConfig",
			Handler:    _V1_GetCityConfig_Handler,
		},
		{
			MethodName: "CalculateQuote",
			Handler:    _V1_CalculateQuote_Handler,
		},
		{
			MethodName: "SelectBestPlatform",
			Handler:    _V1_SelectBestPlatform_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "delivery-strategy.proto",
}
