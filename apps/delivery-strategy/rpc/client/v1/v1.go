// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: delivery-strategy.proto

package v1

import (
	"context"

	"chuandao-sails-core/apps/delivery-strategy/rpc/strategy"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Address                = strategy.Address
	ApiConfig              = strategy.ApiConfig
	AuthConfig             = strategy.AuthConfig
	BusinessRules          = strategy.BusinessRules
	CacheSettings          = strategy.CacheSettings
	CalculateQuoteReq      = strategy.CalculateQuoteReq
	CalculateQuoteResp     = strategy.CalculateQuoteResp
	CitySpecificConfig     = strategy.CitySpecificConfig
	ConfigOverrides        = strategy.ConfigOverrides
	Coordinate             = strategy.Coordinate
	DefaultConfig          = strategy.DefaultConfig
	DeliveryOrderInfo      = strategy.DeliveryOrderInfo
	DeliveryStrategyConfig = strategy.DeliveryStrategyConfig
	FallbackStrategy       = strategy.FallbackStrategy
	GetCityConfigReq       = strategy.GetCityConfigReq
	GetCityConfigResp      = strategy.GetCityConfigResp
	GetStrategyConfigReq   = strategy.GetStrategyConfigReq
	GetStrategyConfigResp  = strategy.GetStrategyConfigResp
	GlobalSettings         = strategy.GlobalSettings
	MonitoringConfig       = strategy.MonitoringConfig
	PlatformConfig         = strategy.PlatformConfig
	PlatformQuote          = strategy.PlatformQuote
	PlatformSelection      = strategy.PlatformSelection
	PricingConfig          = strategy.PricingConfig
	PriorityRule           = strategy.PriorityRule
	RateLimiting           = strategy.RateLimiting
	SelectBestPlatformReq  = strategy.SelectBestPlatformReq
	SelectBestPlatformResp = strategy.SelectBestPlatformResp
	SelectionScore         = strategy.SelectionScore
	ServiceConfig          = strategy.ServiceConfig
	SpecialZone            = strategy.SpecialZone
	StrategyRules          = strategy.StrategyRules
	TimeMultiplier         = strategy.TimeMultiplier

	V1 interface {
		// 获取配送策略配置
		GetStrategyConfig(ctx context.Context, in *GetStrategyConfigReq, opts ...grpc.CallOption) (*GetStrategyConfigResp, error)
		// 更新配送策略配置
		GetCityConfig(ctx context.Context, in *GetCityConfigReq, opts ...grpc.CallOption) (*GetCityConfigResp, error)
		// 更新城市特殊配置
		CalculateQuote(ctx context.Context, in *CalculateQuoteReq, opts ...grpc.CallOption) (*CalculateQuoteResp, error)
		// 选择最优配送平台
		SelectBestPlatform(ctx context.Context, in *SelectBestPlatformReq, opts ...grpc.CallOption) (*SelectBestPlatformResp, error)
	}

	defaultV1 struct {
		cli zrpc.Client
	}
)

func NewV1(cli zrpc.Client) V1 {
	return &defaultV1{
		cli: cli,
	}
}

// 获取配送策略配置
func (m *defaultV1) GetStrategyConfig(ctx context.Context, in *GetStrategyConfigReq, opts ...grpc.CallOption) (*GetStrategyConfigResp, error) {
	client := strategy.NewV1Client(m.cli.Conn())
	return client.GetStrategyConfig(ctx, in, opts...)
}

// 更新配送策略配置
func (m *defaultV1) GetCityConfig(ctx context.Context, in *GetCityConfigReq, opts ...grpc.CallOption) (*GetCityConfigResp, error) {
	client := strategy.NewV1Client(m.cli.Conn())
	return client.GetCityConfig(ctx, in, opts...)
}

// 更新城市特殊配置
func (m *defaultV1) CalculateQuote(ctx context.Context, in *CalculateQuoteReq, opts ...grpc.CallOption) (*CalculateQuoteResp, error) {
	client := strategy.NewV1Client(m.cli.Conn())
	return client.CalculateQuote(ctx, in, opts...)
}

// 选择最优配送平台
func (m *defaultV1) SelectBestPlatform(ctx context.Context, in *SelectBestPlatformReq, opts ...grpc.CallOption) (*SelectBestPlatformResp, error) {
	client := strategy.NewV1Client(m.cli.Conn())
	return client.SelectBestPlatform(ctx, in, opts...)
}
