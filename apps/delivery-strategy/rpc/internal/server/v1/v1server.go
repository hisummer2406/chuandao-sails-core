// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: delivery-strategy.proto

package server

import (
	"context"

	"chuandao-sails-core/apps/delivery-strategy/rpc/internal/logic/v1"
	"chuandao-sails-core/apps/delivery-strategy/rpc/internal/svc"
	"chuandao-sails-core/apps/delivery-strategy/rpc/strategy"
)

type V1Server struct {
	svcCtx *svc.ServiceContext
	strategy.UnimplementedV1Server
}

func NewV1Server(svcCtx *svc.ServiceContext) *V1Server {
	return &V1Server{
		svcCtx: svcCtx,
	}
}

// 获取配送策略配置
func (s *V1Server) GetStrategyConfig(ctx context.Context, in *strategy.GetStrategyConfigReq) (*strategy.GetStrategyConfigResp, error) {
	l := v1logic.NewGetStrategyConfigLogic(ctx, s.svcCtx)
	return l.GetStrategyConfig(in)
}

// 更新配送策略配置
func (s *V1Server) GetCityConfig(ctx context.Context, in *strategy.GetCityConfigReq) (*strategy.GetCityConfigResp, error) {
	l := v1logic.NewGetCityConfigLogic(ctx, s.svcCtx)
	return l.GetCityConfig(in)
}

// 更新城市特殊配置
func (s *V1Server) CalculateQuote(ctx context.Context, in *strategy.CalculateQuoteReq) (*strategy.CalculateQuoteResp, error) {
	l := v1logic.NewCalculateQuoteLogic(ctx, s.svcCtx)
	return l.CalculateQuote(in)
}

// 选择最优配送平台
func (s *V1Server) SelectBestPlatform(ctx context.Context, in *strategy.SelectBestPlatformReq) (*strategy.SelectBestPlatformResp, error) {
	l := v1logic.NewSelectBestPlatformLogic(ctx, s.svcCtx)
	return l.SelectBestPlatform(in)
}
