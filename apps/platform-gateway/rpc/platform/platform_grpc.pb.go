// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: platform.proto

package platform

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlatformClient is the client API for Platform service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlatformClient interface {
	//获取平台配置
	GetPlatformConfig(ctx context.Context, in *GetPlatformConfigReq, opts ...grpc.CallOption) (*GetPlatformConfigResp, error)
}

type platformClient struct {
	cc grpc.ClientConnInterface
}

func NewPlatformClient(cc grpc.ClientConnInterface) PlatformClient {
	return &platformClient{cc}
}

func (c *platformClient) GetPlatformConfig(ctx context.Context, in *GetPlatformConfigReq, opts ...grpc.CallOption) (*GetPlatformConfigResp, error) {
	out := new(GetPlatformConfigResp)
	err := c.cc.Invoke(ctx, "/platform.Platform/GetPlatformConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlatformServer is the server API for Platform service.
// All implementations must embed UnimplementedPlatformServer
// for forward compatibility
type PlatformServer interface {
	//获取平台配置
	GetPlatformConfig(context.Context, *GetPlatformConfigReq) (*GetPlatformConfigResp, error)
	mustEmbedUnimplementedPlatformServer()
}

// UnimplementedPlatformServer must be embedded to have forward compatible implementations.
type UnimplementedPlatformServer struct {
}

func (UnimplementedPlatformServer) GetPlatformConfig(context.Context, *GetPlatformConfigReq) (*GetPlatformConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlatformConfig not implemented")
}
func (UnimplementedPlatformServer) mustEmbedUnimplementedPlatformServer() {}

// UnsafePlatformServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlatformServer will
// result in compilation errors.
type UnsafePlatformServer interface {
	mustEmbedUnimplementedPlatformServer()
}

func RegisterPlatformServer(s grpc.ServiceRegistrar, srv PlatformServer) {
	s.RegisterService(&Platform_ServiceDesc, srv)
}

func _Platform_GetPlatformConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlatformConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).GetPlatformConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform.Platform/GetPlatformConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).GetPlatformConfig(ctx, req.(*GetPlatformConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Platform_ServiceDesc is the grpc.ServiceDesc for Platform service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Platform_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "platform.Platform",
	HandlerType: (*PlatformServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlatformConfig",
			Handler:    _Platform_GetPlatformConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "platform.proto",
}
