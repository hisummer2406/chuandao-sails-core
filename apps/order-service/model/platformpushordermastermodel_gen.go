// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	model2 "chuandao-sails-core/deploy/scripts/model"
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	platformPushOrderMasterFieldNames          = builder.RawFieldNames(&PlatformPushOrderMaster{})
	platformPushOrderMasterRows                = strings.Join(platformPushOrderMasterFieldNames, ",")
	platformPushOrderMasterRowsExpectAutoSet   = strings.Join(stringx.Remove(platformPushOrderMasterFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	platformPushOrderMasterRowsWithPlaceHolder = strings.Join(stringx.Remove(platformPushOrderMasterFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cachePlatformPushOrderMasterIdPrefix              = "cache:platformPushOrderMaster:id:"
	cachePlatformPushOrderMasterUpstreamOrderIdPrefix = "cache:platformPushOrderMaster:upstreamOrderId:"
)

type (
	platformPushOrderMasterModel interface {
		Insert(ctx context.Context, data *PlatformPushOrderMaster) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*PlatformPushOrderMaster, error)
		FindOneByUpstreamOrderId(ctx context.Context, upstreamOrderId string) (*PlatformPushOrderMaster, error)
		Update(ctx context.Context, data *PlatformPushOrderMaster) error
	}

	defaultPlatformPushOrderMasterModel struct {
		sqlc.CachedConn
		table string
	}

	PlatformPushOrderMaster struct {
		Id              uint64         `db:"id"`                // 主键ID
		OrderNo         string         `db:"order_no"`          // 系统内部订单号
		UpstreamOrderId string         `db:"upstream_order_id"` // 上游平台订单号
		PlatformCode    string         `db:"platform_code"`     // 平台标识：UU/SF/CHD
		OrderSource     string         `db:"order_source"`      // 订单来源：MT/SG/EL/JDDJ等
		OrderNum        string         `db:"order_num"`         // 订单流水号
		CityName        string         `db:"city_name"`         // 城市名称
		CountyName      string         `db:"county_name"`       // 县级地名称
		AdCode          string         `db:"ad_code"`           // 城市编码（高德规范）
		SendType        int64          `db:"send_type"`         // 订单小类：0帮我送 1帮我买 2帮我取
		DeliveryType    string         `db:"delivery_type"`     // 配送类型：1团送 2专送
		IsReverseOrder  int64          `db:"is_reverse_order"`  // 是否帮我取订单：1是 0否
		PushType        int64          `db:"push_type"`         // 推送类型：0正常 1测试
		FromAddress     sql.NullString `db:"from_address"`      // 发货地址信息
		ToAddress       sql.NullString `db:"to_address"`        // 收货地址信息
		OrderTime       sql.NullTime   `db:"order_time"`        // 订单时间
		IsSubscribe     int64          `db:"is_subscribe"`      // 是否预约单：1是 0否
		SubscribeType   int64          `db:"subscribe_type"`    // 预约类型：0实时 1预约取件 2预约送达
		SubscribeTime   int64          `db:"subscribe_time"`    // 预约时间戳
		GoodsInfo       sql.NullString `db:"goods_info"`        // 商品详情信息
		PriceInfo       sql.NullString `db:"price_info"`        // 价格信息
		DeliveryOptions sql.NullString `db:"delivery_options"`  // 配送选项
		Note            sql.NullString `db:"note"`              // 备注信息
		DisableDelivery string         `db:"disable_delivery"`  // 禁用配送方
		Status          int64          `db:"status"`            // 状态：1待处理 2已转换 3处理失败
		ErrorMsg        sql.NullString `db:"error_msg"`         // 错误信息
		RetryCount      int64          `db:"retry_count"`       // 重试次数
		CityCode        string         `db:"city_code"`         // 城市编码(二级分区 List Default Hash)
		CreatedAt       time.Time      `db:"created_at"`        // 创建时间(一级分区 Interval_Range)
		UpdatedAt       time.Time      `db:"updated_at"`        // 更新时间
	}
)

func newPlatformPushOrderMasterModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultPlatformPushOrderMasterModel {
	return &defaultPlatformPushOrderMasterModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`platform_push_order_master`",
	}
}

func (m *defaultPlatformPushOrderMasterModel) FindOne(ctx context.Context, id uint64) (*PlatformPushOrderMaster, error) {
	platformPushOrderMasterIdKey := fmt.Sprintf("%s%v", cachePlatformPushOrderMasterIdPrefix, id)
	var resp PlatformPushOrderMaster
	err := m.QueryRowCtx(ctx, &resp, platformPushOrderMasterIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", platformPushOrderMasterRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, model2.ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPlatformPushOrderMasterModel) FindOneByUpstreamOrderId(ctx context.Context, upstreamOrderId string) (*PlatformPushOrderMaster, error) {
	platformPushOrderMasterUpstreamOrderIdKey := fmt.Sprintf("%s%v", cachePlatformPushOrderMasterUpstreamOrderIdPrefix, upstreamOrderId)
	var resp PlatformPushOrderMaster
	err := m.QueryRowIndexCtx(ctx, &resp, platformPushOrderMasterUpstreamOrderIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `upstream_order_id` = ? limit 1", platformPushOrderMasterRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, upstreamOrderId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, model2.ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPlatformPushOrderMasterModel) Insert(ctx context.Context, data *PlatformPushOrderMaster) (sql.Result, error) {
	platformPushOrderMasterIdKey := fmt.Sprintf("%s%v", cachePlatformPushOrderMasterIdPrefix, data.Id)
	platformPushOrderMasterUpstreamOrderIdKey := fmt.Sprintf("%s%v", cachePlatformPushOrderMasterUpstreamOrderIdPrefix, data.UpstreamOrderId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, platformPushOrderMasterRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.OrderNo, data.UpstreamOrderId, data.PlatformCode, data.OrderSource, data.OrderNum, data.CityName, data.CountyName, data.AdCode, data.SendType, data.DeliveryType, data.IsReverseOrder, data.PushType, data.FromAddress, data.ToAddress, data.OrderTime, data.IsSubscribe, data.SubscribeType, data.SubscribeTime, data.GoodsInfo, data.PriceInfo, data.DeliveryOptions, data.Note, data.DisableDelivery, data.Status, data.ErrorMsg, data.RetryCount, data.CityCode)
	}, platformPushOrderMasterIdKey, platformPushOrderMasterUpstreamOrderIdKey)
	return ret, err
}

func (m *defaultPlatformPushOrderMasterModel) Update(ctx context.Context, newData *PlatformPushOrderMaster) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	platformPushOrderMasterIdKey := fmt.Sprintf("%s%v", cachePlatformPushOrderMasterIdPrefix, data.Id)
	platformPushOrderMasterUpstreamOrderIdKey := fmt.Sprintf("%s%v", cachePlatformPushOrderMasterUpstreamOrderIdPrefix, data.UpstreamOrderId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, platformPushOrderMasterRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.OrderNo, newData.UpstreamOrderId, newData.PlatformCode, newData.OrderSource, newData.OrderNum, newData.CityName, newData.CountyName, newData.AdCode, newData.SendType, newData.DeliveryType, newData.IsReverseOrder, newData.PushType, newData.FromAddress, newData.ToAddress, newData.OrderTime, newData.IsSubscribe, newData.SubscribeType, newData.SubscribeTime, newData.GoodsInfo, newData.PriceInfo, newData.DeliveryOptions, newData.Note, newData.DisableDelivery, newData.Status, newData.ErrorMsg, newData.RetryCount, newData.CityCode, newData.Id)
	}, platformPushOrderMasterIdKey, platformPushOrderMasterUpstreamOrderIdKey)
	return err
}

func (m *defaultPlatformPushOrderMasterModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePlatformPushOrderMasterIdPrefix, primary)
}

func (m *defaultPlatformPushOrderMasterModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", platformPushOrderMasterRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultPlatformPushOrderMasterModel) tableName() string {
	return m.table
}
