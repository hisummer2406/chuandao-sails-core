// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	model2 "chuandao-sails-core/deploy/scripts/model"
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	orderStatusLogFieldNames          = builder.RawFieldNames(&OrderStatusLog{})
	orderStatusLogRows                = strings.Join(orderStatusLogFieldNames, ",")
	orderStatusLogRowsExpectAutoSet   = strings.Join(stringx.Remove(orderStatusLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	orderStatusLogRowsWithPlaceHolder = strings.Join(stringx.Remove(orderStatusLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheOrderStatusLogIdPrefix = "cache:orderStatusLog:id:"
)

type (
	orderStatusLogModel interface {
		Insert(ctx context.Context, data *OrderStatusLog) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*OrderStatusLog, error)
		Update(ctx context.Context, data *OrderStatusLog) error
	}

	defaultOrderStatusLogModel struct {
		sqlc.CachedConn
		table string
	}

	OrderStatusLog struct {
		Id           uint64         `db:"id"`            // 主键ID
		OrderNo      string         `db:"order_no"`      // 订单号
		FromStatus   sql.NullString `db:"from_status"`   // 原状态
		ToStatus     string         `db:"to_status"`     // 目标状态
		ChangeReason sql.NullString `db:"change_reason"` // 变更原因
		OperatorId   sql.NullString `db:"operator_id"`   // 操作者ID
		OperatorType string         `db:"operator_type"` // 操作者类型(SYSTEM/USER/PLATFORM)
		OperatorName sql.NullString `db:"operator_name"` // 操作者名称
		ExtraData    sql.NullString `db:"extra_data"`    // 扩展数据
		Remark       sql.NullString `db:"remark"`        // 备注
		CreatedAt    time.Time      `db:"created_at"`    // 创建时间
	}
)

func newOrderStatusLogModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultOrderStatusLogModel {
	return &defaultOrderStatusLogModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`order_status_log`",
	}
}

func (m *defaultOrderStatusLogModel) FindOne(ctx context.Context, id uint64) (*OrderStatusLog, error) {
	orderStatusLogIdKey := fmt.Sprintf("%s%v", cacheOrderStatusLogIdPrefix, id)
	var resp OrderStatusLog
	err := m.QueryRowCtx(ctx, &resp, orderStatusLogIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", orderStatusLogRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, model2.ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderStatusLogModel) Insert(ctx context.Context, data *OrderStatusLog) (sql.Result, error) {
	orderStatusLogIdKey := fmt.Sprintf("%s%v", cacheOrderStatusLogIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, orderStatusLogRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.OrderNo, data.FromStatus, data.ToStatus, data.ChangeReason, data.OperatorId, data.OperatorType, data.OperatorName, data.ExtraData, data.Remark)
	}, orderStatusLogIdKey)
	return ret, err
}

func (m *defaultOrderStatusLogModel) Update(ctx context.Context, data *OrderStatusLog) error {
	orderStatusLogIdKey := fmt.Sprintf("%s%v", cacheOrderStatusLogIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, orderStatusLogRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.OrderNo, data.FromStatus, data.ToStatus, data.ChangeReason, data.OperatorId, data.OperatorType, data.OperatorName, data.ExtraData, data.Remark, data.Id)
	}, orderStatusLogIdKey)
	return err
}

func (m *defaultOrderStatusLogModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheOrderStatusLogIdPrefix, primary)
}

func (m *defaultOrderStatusLogModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", orderStatusLogRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultOrderStatusLogModel) tableName() string {
	return m.table
}
