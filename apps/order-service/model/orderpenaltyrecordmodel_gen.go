// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	orderPenaltyRecordFieldNames          = builder.RawFieldNames(&OrderPenaltyRecord{})
	orderPenaltyRecordRows                = strings.Join(orderPenaltyRecordFieldNames, ",")
	orderPenaltyRecordRowsExpectAutoSet   = strings.Join(stringx.Remove(orderPenaltyRecordFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	orderPenaltyRecordRowsWithPlaceHolder = strings.Join(stringx.Remove(orderPenaltyRecordFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheCdtsOrderDbOrderPenaltyRecordIdPrefix        = "cache:cdtsOrderDb:orderPenaltyRecord:id:"
	cacheCdtsOrderDbOrderPenaltyRecordPenaltyIdPrefix = "cache:cdtsOrderDb:orderPenaltyRecord:penaltyId:"
)

type (
	orderPenaltyRecordModel interface {
		Insert(ctx context.Context, data *OrderPenaltyRecord) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*OrderPenaltyRecord, error)
		FindOneByPenaltyId(ctx context.Context, penaltyId string) (*OrderPenaltyRecord, error)
		Update(ctx context.Context, data *OrderPenaltyRecord) error
	}

	defaultOrderPenaltyRecordModel struct {
		sqlc.CachedConn
		table string
	}

	OrderPenaltyRecord struct {
		Id                uint64    `db:"id"`                 // 主键ID
		PenaltyId         string    `db:"penalty_id"`         // 违约记录ID
		OrderNo           string    `db:"order_no"`           // 订单号
		PenaltyType       string    `db:"penalty_type"`       // 违约类型(CANCEL/TIMEOUT/REJECT)
		PenaltyReason     string    `db:"penalty_reason"`     // 违约原因
		PenaltyAmount     float64   `db:"penalty_amount"`     // 违约金额
		PenaltyStatus     string    `db:"penalty_status"`     // 违约状态(CALCULATED/SETTLED/WAIVED)
		AppliedRules      string    `db:"applied_rules"`      // 应用的规则 JSON
		CalculationDetail string    `db:"calculation_detail"` // 计算明细 JSON
		PenaltyTime       time.Time `db:"penalty_time"`       // 违约发生时间
		CalculateTime     time.Time `db:"calculate_time"`     // 计算时间
		SettleTime        time.Time `db:"settle_time"`        // 结算时间
		CreatedAt         time.Time `db:"created_at"`         // 创建时间
		UpdatedAt         time.Time `db:"updated_at"`         // 更新时间
	}
)

func newOrderPenaltyRecordModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultOrderPenaltyRecordModel {
	return &defaultOrderPenaltyRecordModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`order_penalty_record`",
	}
}

func (m *defaultOrderPenaltyRecordModel) FindOne(ctx context.Context, id uint64) (*OrderPenaltyRecord, error) {
	cdtsOrderDbOrderPenaltyRecordIdKey := fmt.Sprintf("%s%v", cacheCdtsOrderDbOrderPenaltyRecordIdPrefix, id)
	var resp OrderPenaltyRecord
	err := m.QueryRowCtx(ctx, &resp, cdtsOrderDbOrderPenaltyRecordIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", orderPenaltyRecordRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderPenaltyRecordModel) FindOneByPenaltyId(ctx context.Context, penaltyId string) (*OrderPenaltyRecord, error) {
	cdtsOrderDbOrderPenaltyRecordPenaltyIdKey := fmt.Sprintf("%s%v", cacheCdtsOrderDbOrderPenaltyRecordPenaltyIdPrefix, penaltyId)
	var resp OrderPenaltyRecord
	err := m.QueryRowIndexCtx(ctx, &resp, cdtsOrderDbOrderPenaltyRecordPenaltyIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `penalty_id` = ? limit 1", orderPenaltyRecordRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, penaltyId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderPenaltyRecordModel) Insert(ctx context.Context, data *OrderPenaltyRecord) (sql.Result, error) {
	cdtsOrderDbOrderPenaltyRecordIdKey := fmt.Sprintf("%s%v", cacheCdtsOrderDbOrderPenaltyRecordIdPrefix, data.Id)
	cdtsOrderDbOrderPenaltyRecordPenaltyIdKey := fmt.Sprintf("%s%v", cacheCdtsOrderDbOrderPenaltyRecordPenaltyIdPrefix, data.PenaltyId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, orderPenaltyRecordRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.PenaltyId, data.OrderNo, data.PenaltyType, data.PenaltyReason, data.PenaltyAmount, data.PenaltyStatus, data.AppliedRules, data.CalculationDetail, data.PenaltyTime, data.CalculateTime, data.SettleTime)
	}, cdtsOrderDbOrderPenaltyRecordIdKey, cdtsOrderDbOrderPenaltyRecordPenaltyIdKey)
	return ret, err
}

func (m *defaultOrderPenaltyRecordModel) Update(ctx context.Context, newData *OrderPenaltyRecord) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	cdtsOrderDbOrderPenaltyRecordIdKey := fmt.Sprintf("%s%v", cacheCdtsOrderDbOrderPenaltyRecordIdPrefix, data.Id)
	cdtsOrderDbOrderPenaltyRecordPenaltyIdKey := fmt.Sprintf("%s%v", cacheCdtsOrderDbOrderPenaltyRecordPenaltyIdPrefix, data.PenaltyId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, orderPenaltyRecordRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.PenaltyId, newData.OrderNo, newData.PenaltyType, newData.PenaltyReason, newData.PenaltyAmount, newData.PenaltyStatus, newData.AppliedRules, newData.CalculationDetail, newData.PenaltyTime, newData.CalculateTime, newData.SettleTime, newData.Id)
	}, cdtsOrderDbOrderPenaltyRecordIdKey, cdtsOrderDbOrderPenaltyRecordPenaltyIdKey)
	return err
}

func (m *defaultOrderPenaltyRecordModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheCdtsOrderDbOrderPenaltyRecordIdPrefix, primary)
}

func (m *defaultOrderPenaltyRecordModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", orderPenaltyRecordRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultOrderPenaltyRecordModel) tableName() string {
	return m.table
}
