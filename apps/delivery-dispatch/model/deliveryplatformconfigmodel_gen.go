// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	deliveryPlatformConfigFieldNames          = builder.RawFieldNames(&DeliveryPlatformConfig{})
	deliveryPlatformConfigRows                = strings.Join(deliveryPlatformConfigFieldNames, ",")
	deliveryPlatformConfigRowsExpectAutoSet   = strings.Join(stringx.Remove(deliveryPlatformConfigFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	deliveryPlatformConfigRowsWithPlaceHolder = strings.Join(stringx.Remove(deliveryPlatformConfigFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheCdtsDeliveryDbDeliveryPlatformConfigIdPrefix           = "cache:cdtsDeliveryDb:deliveryPlatformConfig:id:"
	cacheCdtsDeliveryDbDeliveryPlatformConfigPlatformCodePrefix = "cache:cdtsDeliveryDb:deliveryPlatformConfig:platformCode:"
)

type (
	deliveryPlatformConfigModel interface {
		Insert(ctx context.Context, data *DeliveryPlatformConfig) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*DeliveryPlatformConfig, error)
		FindOneByPlatformCode(ctx context.Context, platformCode string) (*DeliveryPlatformConfig, error)
		Update(ctx context.Context, data *DeliveryPlatformConfig) error
	}

	defaultDeliveryPlatformConfigModel struct {
		sqlc.CachedConn
		table string
	}

	DeliveryPlatformConfig struct {
		Id           int64     `db:"id"`            // 主键ID
		PlatformCode string    `db:"platform_code"` // 平台编码
		PlatformName string    `db:"platform_name"` // 平台名称
		Status       int64     `db:"status"`        // 平台状态：1启用 0禁用
		Weight       int64     `db:"weight"`        // 平台权重(用于负载均衡)
		Remark       string    `db:"remark"`        // 备注
		CreatedAt    time.Time `db:"created_at"`
		UpdatedAt    time.Time `db:"updated_at"`
	}
)

func newDeliveryPlatformConfigModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultDeliveryPlatformConfigModel {
	return &defaultDeliveryPlatformConfigModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`delivery_platform_config`",
	}
}

func (m *defaultDeliveryPlatformConfigModel) FindOne(ctx context.Context, id int64) (*DeliveryPlatformConfig, error) {
	cdtsDeliveryDbDeliveryPlatformConfigIdKey := fmt.Sprintf("%s%v", cacheCdtsDeliveryDbDeliveryPlatformConfigIdPrefix, id)
	var resp DeliveryPlatformConfig
	err := m.QueryRowCtx(ctx, &resp, cdtsDeliveryDbDeliveryPlatformConfigIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", deliveryPlatformConfigRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDeliveryPlatformConfigModel) FindOneByPlatformCode(ctx context.Context, platformCode string) (*DeliveryPlatformConfig, error) {
	cdtsDeliveryDbDeliveryPlatformConfigPlatformCodeKey := fmt.Sprintf("%s%v", cacheCdtsDeliveryDbDeliveryPlatformConfigPlatformCodePrefix, platformCode)
	var resp DeliveryPlatformConfig
	err := m.QueryRowIndexCtx(ctx, &resp, cdtsDeliveryDbDeliveryPlatformConfigPlatformCodeKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `platform_code` = ? limit 1", deliveryPlatformConfigRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, platformCode); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDeliveryPlatformConfigModel) Insert(ctx context.Context, data *DeliveryPlatformConfig) (sql.Result, error) {
	cdtsDeliveryDbDeliveryPlatformConfigIdKey := fmt.Sprintf("%s%v", cacheCdtsDeliveryDbDeliveryPlatformConfigIdPrefix, data.Id)
	cdtsDeliveryDbDeliveryPlatformConfigPlatformCodeKey := fmt.Sprintf("%s%v", cacheCdtsDeliveryDbDeliveryPlatformConfigPlatformCodePrefix, data.PlatformCode)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, deliveryPlatformConfigRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.PlatformCode, data.PlatformName, data.Status, data.Weight, data.Remark)
	}, cdtsDeliveryDbDeliveryPlatformConfigIdKey, cdtsDeliveryDbDeliveryPlatformConfigPlatformCodeKey)
	return ret, err
}

func (m *defaultDeliveryPlatformConfigModel) Update(ctx context.Context, newData *DeliveryPlatformConfig) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	cdtsDeliveryDbDeliveryPlatformConfigIdKey := fmt.Sprintf("%s%v", cacheCdtsDeliveryDbDeliveryPlatformConfigIdPrefix, data.Id)
	cdtsDeliveryDbDeliveryPlatformConfigPlatformCodeKey := fmt.Sprintf("%s%v", cacheCdtsDeliveryDbDeliveryPlatformConfigPlatformCodePrefix, data.PlatformCode)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, deliveryPlatformConfigRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.PlatformCode, newData.PlatformName, newData.Status, newData.Weight, newData.Remark, newData.Id)
	}, cdtsDeliveryDbDeliveryPlatformConfigIdKey, cdtsDeliveryDbDeliveryPlatformConfigPlatformCodeKey)
	return err
}

func (m *defaultDeliveryPlatformConfigModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheCdtsDeliveryDbDeliveryPlatformConfigIdPrefix, primary)
}

func (m *defaultDeliveryPlatformConfigModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", deliveryPlatformConfigRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultDeliveryPlatformConfigModel) tableName() string {
	return m.table
}
