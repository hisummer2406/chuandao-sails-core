// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	dispatchInquiryDetailFieldNames          = builder.RawFieldNames(&DispatchInquiryDetail{})
	dispatchInquiryDetailRows                = strings.Join(dispatchInquiryDetailFieldNames, ",")
	dispatchInquiryDetailRowsExpectAutoSet   = strings.Join(stringx.Remove(dispatchInquiryDetailFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	dispatchInquiryDetailRowsWithPlaceHolder = strings.Join(stringx.Remove(dispatchInquiryDetailFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheDispatchInquiryDetailIdPrefix = "cache:dispatchInquiryDetail:id:"
)

type (
	dispatchInquiryDetailModel interface {
		Insert(ctx context.Context, data *DispatchInquiryDetail) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*DispatchInquiryDetail, error)
		Update(ctx context.Context, data *DispatchInquiryDetail) error
	}

	defaultDispatchInquiryDetailModel struct {
		sqlc.CachedConn
		table string
	}

	DispatchInquiryDetail struct {
		Id             uint64    `db:"id"`              // 主键ID
		InquiryId      int64     `db:"inquiry_id"`      // 询价ID
		AccountId      int64     `db:"account_id"`      // 询价账号ID
		DeliveryCode   string    `db:"delivery_code"`   // 平台代码
		Price          int64     `db:"price"`           // 配送费用(分)
		Distance       int64     `db:"distance"`        // 配送距离(米)
		Duration       int64     `db:"duration"`        // 接口耗时(毫秒)
		EstimateTime   int64     `db:"estimate_time"`   // 预计时长(分钟)
		QuoteStatus    int64     `db:"quote_status"`    // 询价状态：0-失败 1-成功
		PriceToken     string    `db:"price_token"`     // 配送费令牌
		ResultResponse string    `db:"result_response"` // 原始响应
		CreatedAt      time.Time `db:"created_at"`      // 创建时间
	}
)

func newDispatchInquiryDetailModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultDispatchInquiryDetailModel {
	return &defaultDispatchInquiryDetailModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`dispatch_inquiry_detail`",
	}
}

func (m *defaultDispatchInquiryDetailModel) FindOne(ctx context.Context, id uint64) (*DispatchInquiryDetail, error) {
	dispatchInquiryDetailIdKey := fmt.Sprintf("%s%v", cacheDispatchInquiryDetailIdPrefix, id)
	var resp DispatchInquiryDetail
	err := m.QueryRowCtx(ctx, &resp, dispatchInquiryDetailIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", dispatchInquiryDetailRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDispatchInquiryDetailModel) Insert(ctx context.Context, data *DispatchInquiryDetail) (sql.Result, error) {
	dispatchInquiryDetailIdKey := fmt.Sprintf("%s%v", cacheDispatchInquiryDetailIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, dispatchInquiryDetailRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.InquiryId, data.AccountId, data.DeliveryCode, data.Price, data.Distance, data.Duration, data.EstimateTime, data.QuoteStatus, data.PriceToken, data.ResultResponse)
	}, dispatchInquiryDetailIdKey)
	return ret, err
}

func (m *defaultDispatchInquiryDetailModel) Update(ctx context.Context, data *DispatchInquiryDetail) error {
	dispatchInquiryDetailIdKey := fmt.Sprintf("%s%v", cacheDispatchInquiryDetailIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, dispatchInquiryDetailRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.InquiryId, data.AccountId, data.DeliveryCode, data.Price, data.Distance, data.Duration, data.EstimateTime, data.QuoteStatus, data.PriceToken, data.ResultResponse, data.Id)
	}, dispatchInquiryDetailIdKey)
	return err
}

func (m *defaultDispatchInquiryDetailModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheDispatchInquiryDetailIdPrefix, primary)
}

func (m *defaultDispatchInquiryDetailModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", dispatchInquiryDetailRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultDispatchInquiryDetailModel) tableName() string {
	return m.table
}
