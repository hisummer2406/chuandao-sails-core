// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	dispatchFeeAddLogFieldNames          = builder.RawFieldNames(&DispatchFeeAddLog{})
	dispatchFeeAddLogRows                = strings.Join(dispatchFeeAddLogFieldNames, ",")
	dispatchFeeAddLogRowsExpectAutoSet   = strings.Join(stringx.Remove(dispatchFeeAddLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	dispatchFeeAddLogRowsWithPlaceHolder = strings.Join(stringx.Remove(dispatchFeeAddLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheDispatchFeeAddLogIdPrefix = "cache:dispatchFeeAddLog:id:"
)

type (
	dispatchFeeAddLogModel interface {
		Insert(ctx context.Context, data *DispatchFeeAddLog) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*DispatchFeeAddLog, error)
		Update(ctx context.Context, data *DispatchFeeAddLog) error
	}

	defaultDispatchFeeAddLogModel struct {
		sqlc.CachedConn
		table string
	}

	DispatchFeeAddLog struct {
		Id                   uint64    `db:"id"`                     // 主键ID
		DeliveryNo           string    `db:"delivery_no"`            // 配送单号
		ExternalOrderNo      string    `db:"external_order_no"`      // 外部订单号
		PlatformCode         string    `db:"platform_code"`          // 配送平台代码
		PlatformOrderNo      string    `db:"platform_order_no"`      // 平台订单号
		FeeAmount            float64   `db:"fee_amount"`             // 追加小费金额(元)
		FeeType              string    `db:"fee_type"`               // 小费类型:ONLINE/OFFLINE
		FeeReason            string    `db:"fee_reason"`             // 追加原因
		OrderStatus          string    `db:"order_status"`           // 追加时订单状态
		OriginalPrice        float64   `db:"original_price"`         // 原始价格(元)
		TotalFeeBefore       float64   `db:"total_fee_before"`       // 追加前总小费(元)
		TotalFeeAfter        float64   `db:"total_fee_after"`        // 追加后总小费(元)
		TotalAmount          float64   `db:"total_amount"`           // 追加后总金额(元)
		Operator             string    `db:"operator"`               // 操作人
		OperatorType         string    `db:"operator_type"`          // 操作类型:USER/SYSTEM/CUSTOMER_SERVICE
		OperationSource      string    `db:"operation_source"`       // 操作来源:API/WEB/MOBILE
		IsSuccess            int64     `db:"is_success"`             // 是否成功:1成功0失败
		PlatformResponseCode string    `db:"platform_response_code"` // 平台响应码
		PlatformResponseMsg  string    `db:"platform_response_msg"`  // 平台响应消息
		RequestData          string    `db:"request_data"`           // 请求数据
		ResponseData         string    `db:"response_data"`          // 响应数据
		PaymentStatus        string    `db:"payment_status"`         // 支付状态:PENDING/SUCCESS/FAILED
		PaymentMethod        string    `db:"payment_method"`         // 支付方式:ALIPAY/WECHAT/BALANCE
		PaymentTime          time.Time `db:"payment_time"`           // 支付时间
		TransactionNo        string    `db:"transaction_no"`         // 交易流水号
		RetryCount           int64     `db:"retry_count"`            // 重试次数
		ExtraData            string    `db:"extra_data"`             // 扩展数据
		CityCode             string    `db:"city_code"`              // 城市编码
		CreatedAt            time.Time `db:"created_at"`             // 创建时间
		UpdatedAt            time.Time `db:"updated_at"`             // 更新时间
	}
)

func newDispatchFeeAddLogModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultDispatchFeeAddLogModel {
	return &defaultDispatchFeeAddLogModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`dispatch_fee_add_log`",
	}
}

func (m *defaultDispatchFeeAddLogModel) FindOne(ctx context.Context, id uint64) (*DispatchFeeAddLog, error) {
	dispatchFeeAddLogIdKey := fmt.Sprintf("%s%v", cacheDispatchFeeAddLogIdPrefix, id)
	var resp DispatchFeeAddLog
	err := m.QueryRowCtx(ctx, &resp, dispatchFeeAddLogIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", dispatchFeeAddLogRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDispatchFeeAddLogModel) Insert(ctx context.Context, data *DispatchFeeAddLog) (sql.Result, error) {
	dispatchFeeAddLogIdKey := fmt.Sprintf("%s%v", cacheDispatchFeeAddLogIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, dispatchFeeAddLogRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.DeliveryNo, data.ExternalOrderNo, data.PlatformCode, data.PlatformOrderNo, data.FeeAmount, data.FeeType, data.FeeReason, data.OrderStatus, data.OriginalPrice, data.TotalFeeBefore, data.TotalFeeAfter, data.TotalAmount, data.Operator, data.OperatorType, data.OperationSource, data.IsSuccess, data.PlatformResponseCode, data.PlatformResponseMsg, data.RequestData, data.ResponseData, data.PaymentStatus, data.PaymentMethod, data.PaymentTime, data.TransactionNo, data.RetryCount, data.ExtraData, data.CityCode)
	}, dispatchFeeAddLogIdKey)
	return ret, err
}

func (m *defaultDispatchFeeAddLogModel) Update(ctx context.Context, data *DispatchFeeAddLog) error {
	dispatchFeeAddLogIdKey := fmt.Sprintf("%s%v", cacheDispatchFeeAddLogIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, dispatchFeeAddLogRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.DeliveryNo, data.ExternalOrderNo, data.PlatformCode, data.PlatformOrderNo, data.FeeAmount, data.FeeType, data.FeeReason, data.OrderStatus, data.OriginalPrice, data.TotalFeeBefore, data.TotalFeeAfter, data.TotalAmount, data.Operator, data.OperatorType, data.OperationSource, data.IsSuccess, data.PlatformResponseCode, data.PlatformResponseMsg, data.RequestData, data.ResponseData, data.PaymentStatus, data.PaymentMethod, data.PaymentTime, data.TransactionNo, data.RetryCount, data.ExtraData, data.CityCode, data.Id)
	}, dispatchFeeAddLogIdKey)
	return err
}

func (m *defaultDispatchFeeAddLogModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheDispatchFeeAddLogIdPrefix, primary)
}

func (m *defaultDispatchFeeAddLogModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", dispatchFeeAddLogRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultDispatchFeeAddLogModel) tableName() string {
	return m.table
}
