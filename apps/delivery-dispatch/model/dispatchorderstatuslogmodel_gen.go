// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	dispatchOrderStatusLogFieldNames          = builder.RawFieldNames(&DispatchOrderStatusLog{})
	dispatchOrderStatusLogRows                = strings.Join(dispatchOrderStatusLogFieldNames, ",")
	dispatchOrderStatusLogRowsExpectAutoSet   = strings.Join(stringx.Remove(dispatchOrderStatusLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	dispatchOrderStatusLogRowsWithPlaceHolder = strings.Join(stringx.Remove(dispatchOrderStatusLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheDispatchOrderStatusLogIdPrefix = "cache:dispatchOrderStatusLog:id:"
)

type (
	dispatchOrderStatusLogModel interface {
		Insert(ctx context.Context, data *DispatchOrderStatusLog) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*DispatchOrderStatusLog, error)
		Update(ctx context.Context, data *DispatchOrderStatusLog) error
	}

	defaultDispatchOrderStatusLogModel struct {
		sqlc.CachedConn
		table string
	}

	DispatchOrderStatusLog struct {
		Id              uint64    `db:"id"`                // 主键ID
		DeliveryNo      string    `db:"delivery_no"`       // 配送单号
		ExternalOrderNo string    `db:"external_order_no"` // 外部订单号
		PlatformCode    string    `db:"platform_code"`     // 配送平台代码
		PlatformOrderNo string    `db:"platform_order_no"` // 平台订单号
		OldStatus       string    `db:"old_status"`        // 原状态
		NewStatus       string    `db:"new_status"`        // 新状态
		StatusDesc      string    `db:"status_desc"`       // 状态描述
		Operator        string    `db:"operator"`          // 操作人
		OperatorType    string    `db:"operator_type"`     // 操作类型：SYSTEM/PLATFORM/USER/API
		OperationSource string    `db:"operation_source"`  // 操作来源：CALLBACK/POLLING/MANUAL/AUTO
		ChangeReason    string    `db:"change_reason"`     // 变更原因
		ExtraData       string    `db:"extra_data"`        // 扩展数据
		CityCode        string    `db:"city_code"`         // 城市编码
		CreatedAt       time.Time `db:"created_at"`        // 创建时间
	}
)

func newDispatchOrderStatusLogModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultDispatchOrderStatusLogModel {
	return &defaultDispatchOrderStatusLogModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`dispatch_order_status_log`",
	}
}

func (m *defaultDispatchOrderStatusLogModel) FindOne(ctx context.Context, id uint64) (*DispatchOrderStatusLog, error) {
	dispatchOrderStatusLogIdKey := fmt.Sprintf("%s%v", cacheDispatchOrderStatusLogIdPrefix, id)
	var resp DispatchOrderStatusLog
	err := m.QueryRowCtx(ctx, &resp, dispatchOrderStatusLogIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", dispatchOrderStatusLogRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDispatchOrderStatusLogModel) Insert(ctx context.Context, data *DispatchOrderStatusLog) (sql.Result, error) {
	dispatchOrderStatusLogIdKey := fmt.Sprintf("%s%v", cacheDispatchOrderStatusLogIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, dispatchOrderStatusLogRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.DeliveryNo, data.ExternalOrderNo, data.PlatformCode, data.PlatformOrderNo, data.OldStatus, data.NewStatus, data.StatusDesc, data.Operator, data.OperatorType, data.OperationSource, data.ChangeReason, data.ExtraData, data.CityCode)
	}, dispatchOrderStatusLogIdKey)
	return ret, err
}

func (m *defaultDispatchOrderStatusLogModel) Update(ctx context.Context, data *DispatchOrderStatusLog) error {
	dispatchOrderStatusLogIdKey := fmt.Sprintf("%s%v", cacheDispatchOrderStatusLogIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, dispatchOrderStatusLogRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.DeliveryNo, data.ExternalOrderNo, data.PlatformCode, data.PlatformOrderNo, data.OldStatus, data.NewStatus, data.StatusDesc, data.Operator, data.OperatorType, data.OperationSource, data.ChangeReason, data.ExtraData, data.CityCode, data.Id)
	}, dispatchOrderStatusLogIdKey)
	return err
}

func (m *defaultDispatchOrderStatusLogModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheDispatchOrderStatusLogIdPrefix, primary)
}

func (m *defaultDispatchOrderStatusLogModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", dispatchOrderStatusLogRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultDispatchOrderStatusLogModel) tableName() string {
	return m.table
}
