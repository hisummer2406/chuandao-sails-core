// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	trackOrderTrackLogFieldNames          = builder.RawFieldNames(&TrackOrderTrackLog{})
	trackOrderTrackLogRows                = strings.Join(trackOrderTrackLogFieldNames, ",")
	trackOrderTrackLogRowsExpectAutoSet   = strings.Join(stringx.Remove(trackOrderTrackLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	trackOrderTrackLogRowsWithPlaceHolder = strings.Join(stringx.Remove(trackOrderTrackLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheTrackOrderTrackLogIdPrefix = "cache:trackOrderTrackLog:id:"
)

type (
	trackOrderTrackLogModel interface {
		Insert(ctx context.Context, data *TrackOrderTrackLog) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*TrackOrderTrackLog, error)
		Update(ctx context.Context, data *TrackOrderTrackLog) error
	}

	defaultTrackOrderTrackLogModel struct {
		sqlc.CachedConn
		table string
	}

	TrackOrderTrackLog struct {
		Id              uint64    `db:"id"`                // 主键ID
		DeliveryNo      string    `db:"delivery_no"`       // 配送单号
		ExternalOrderNo string    `db:"external_order_no"` // 外部订单号
		PlatformCode    string    `db:"platform_code"`     // 配送平台代码
		PlatformOrderNo string    `db:"platform_order_no"` // 平台订单号
		TrackType       string    `db:"track_type"`        // 轨迹类型：STATUS/LOCATION/TIMELINE/EXCEPTION
		OrderStatus     string    `db:"order_status"`      // 订单状态
		StatusDesc      string    `db:"status_desc"`       // 状态描述
		StatusTime      time.Time `db:"status_time"`       // 状态时间
		Latitude        float64   `db:"latitude"`          // 纬度
		Longitude       float64   `db:"longitude"`         // 经度
		Address         string    `db:"address"`           // 地址描述
		LocationTime    time.Time `db:"location_time"`     // 位置时间
		CourierName     string    `db:"courier_name"`      // 骑手姓名
		CourierPhone    string    `db:"courier_phone"`     // 骑手电话
		CourierInfo     string    `db:"courier_info"`      // 骑手详情
		Operator        string    `db:"operator"`          // 操作人
		OperatorType    string    `db:"operator_type"`     // 操作类型：PLATFORM/SYSTEM/COURIER/USER
		OperationDesc   string    `db:"operation_desc"`    // 操作描述
		DataSource      string    `db:"data_source"`       // 数据来源：CALLBACK/POLLING/MANUAL
		SourceTime      time.Time `db:"source_time"`       // 数据源时间
		PhotoUrls       string    `db:"photo_urls"`        // 照片URL列表
		ExtraData       string    `db:"extra_data"`        // 扩展数据
		CityCode        string    `db:"city_code"`         // 城市编码
		CreatedAt       time.Time `db:"created_at"`        // 创建时间
	}
)

func newTrackOrderTrackLogModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTrackOrderTrackLogModel {
	return &defaultTrackOrderTrackLogModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`track_order_track_log`",
	}
}

func (m *defaultTrackOrderTrackLogModel) FindOne(ctx context.Context, id uint64) (*TrackOrderTrackLog, error) {
	trackOrderTrackLogIdKey := fmt.Sprintf("%s%v", cacheTrackOrderTrackLogIdPrefix, id)
	var resp TrackOrderTrackLog
	err := m.QueryRowCtx(ctx, &resp, trackOrderTrackLogIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", trackOrderTrackLogRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTrackOrderTrackLogModel) Insert(ctx context.Context, data *TrackOrderTrackLog) (sql.Result, error) {
	trackOrderTrackLogIdKey := fmt.Sprintf("%s%v", cacheTrackOrderTrackLogIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, trackOrderTrackLogRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.DeliveryNo, data.ExternalOrderNo, data.PlatformCode, data.PlatformOrderNo, data.TrackType, data.OrderStatus, data.StatusDesc, data.StatusTime, data.Latitude, data.Longitude, data.Address, data.LocationTime, data.CourierName, data.CourierPhone, data.CourierInfo, data.Operator, data.OperatorType, data.OperationDesc, data.DataSource, data.SourceTime, data.PhotoUrls, data.ExtraData, data.CityCode)
	}, trackOrderTrackLogIdKey)
	return ret, err
}

func (m *defaultTrackOrderTrackLogModel) Update(ctx context.Context, data *TrackOrderTrackLog) error {
	trackOrderTrackLogIdKey := fmt.Sprintf("%s%v", cacheTrackOrderTrackLogIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, trackOrderTrackLogRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.DeliveryNo, data.ExternalOrderNo, data.PlatformCode, data.PlatformOrderNo, data.TrackType, data.OrderStatus, data.StatusDesc, data.StatusTime, data.Latitude, data.Longitude, data.Address, data.LocationTime, data.CourierName, data.CourierPhone, data.CourierInfo, data.Operator, data.OperatorType, data.OperationDesc, data.DataSource, data.SourceTime, data.PhotoUrls, data.ExtraData, data.CityCode, data.Id)
	}, trackOrderTrackLogIdKey)
	return err
}

func (m *defaultTrackOrderTrackLogModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheTrackOrderTrackLogIdPrefix, primary)
}

func (m *defaultTrackOrderTrackLogModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", trackOrderTrackLogRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTrackOrderTrackLogModel) tableName() string {
	return m.table
}
