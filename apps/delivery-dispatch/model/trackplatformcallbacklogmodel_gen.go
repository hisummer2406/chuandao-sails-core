// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	trackPlatformCallbackLogFieldNames          = builder.RawFieldNames(&TrackPlatformCallbackLog{})
	trackPlatformCallbackLogRows                = strings.Join(trackPlatformCallbackLogFieldNames, ",")
	trackPlatformCallbackLogRowsExpectAutoSet   = strings.Join(stringx.Remove(trackPlatformCallbackLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	trackPlatformCallbackLogRowsWithPlaceHolder = strings.Join(stringx.Remove(trackPlatformCallbackLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheTrackPlatformCallbackLogIdPrefix = "cache:trackPlatformCallbackLog:id:"
)

type (
	trackPlatformCallbackLogModel interface {
		Insert(ctx context.Context, data *TrackPlatformCallbackLog) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*TrackPlatformCallbackLog, error)
		Update(ctx context.Context, data *TrackPlatformCallbackLog) error
	}

	defaultTrackPlatformCallbackLogModel struct {
		sqlc.CachedConn
		table string
	}

	TrackPlatformCallbackLog struct {
		Id              uint64    `db:"id"`                // 主键ID
		TraceId         string    `db:"trace_id"`          // 追踪ID
		CallbackId      string    `db:"callback_id"`       // 回调ID（平台提供）
		DeliveryNo      string    `db:"delivery_no"`       // 配送单号
		ExternalOrderNo string    `db:"external_order_no"` // 外部订单号
		PlatformCode    string    `db:"platform_code"`     // 配送平台代码
		PlatformOrderNo string    `db:"platform_order_no"` // 平台订单号
		CallbackType    string    `db:"callback_type"`     // 回调类型：STATUS/LOCATION/EXCEPTION/TIMEOUT
		CallbackEvent   string    `db:"callback_event"`    // 回调事件：ORDER_ACCEPT/COURIER_ASSIGN/PICKUP/DELIVER等
		RequestMethod   string    `db:"request_method"`    // HTTP方法：GET/POST
		RequestUrl      string    `db:"request_url"`       // 请求URL
		RequestHeaders  string    `db:"request_headers"`   // 请求头
		RequestBody     string    `db:"request_body"`      // 请求体（原始数据）
		RequestIp       string    `db:"request_ip"`        // 请求IP
		Signature       string    `db:"signature"`         // 签名
		SignatureType   string    `db:"signature_type"`    // 签名类型：MD5/SHA256/HMAC
		VerifyResult    int64     `db:"verify_result"`     // 签名验证结果：1成功 0失败
		VerifyError     string    `db:"verify_error"`      // 验证错误信息
		BusinessData    string    `db:"business_data"`     // 业务数据（解析后）
		OrderStatus     string    `db:"order_status"`      // 订单状态
		CourierInfo     string    `db:"courier_info"`      // 骑手信息
		LocationInfo    string    `db:"location_info"`     // 位置信息
		IsProcessed     int64     `db:"is_processed"`      // 是否已处理：1是 0否
		ProcessResult   string    `db:"process_result"`    // 处理结果：SUCCESS/FAILED/IGNORED/DUPLICATE
		ProcessError    string    `db:"process_error"`     // 处理错误信息
		ProcessDuration int64     `db:"process_duration"`  // 处理耗时（毫秒）
		ProcessedAt     time.Time `db:"processed_at"`      // 处理时间
		ResponseCode    int64     `db:"response_code"`     // HTTP响应码
		ResponseBody    string    `db:"response_body"`     // 响应体
		IsDuplicate     int64     `db:"is_duplicate"`      // 是否重复回调：1是 0否
		DuplicateCount  int64     `db:"duplicate_count"`   // 重复次数
		ExtraData       string    `db:"extra_data"`        // 扩展数据
		CityCode        string    `db:"city_code"`         // 城市编码
		CreatedAt       time.Time `db:"created_at"`        // 创建时间
		UpdatedAt       time.Time `db:"updated_at"`        // 更新时间
	}
)

func newTrackPlatformCallbackLogModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTrackPlatformCallbackLogModel {
	return &defaultTrackPlatformCallbackLogModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`track_platform_callback_log`",
	}
}

func (m *defaultTrackPlatformCallbackLogModel) FindOne(ctx context.Context, id uint64) (*TrackPlatformCallbackLog, error) {
	trackPlatformCallbackLogIdKey := fmt.Sprintf("%s%v", cacheTrackPlatformCallbackLogIdPrefix, id)
	var resp TrackPlatformCallbackLog
	err := m.QueryRowCtx(ctx, &resp, trackPlatformCallbackLogIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", trackPlatformCallbackLogRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTrackPlatformCallbackLogModel) Insert(ctx context.Context, data *TrackPlatformCallbackLog) (sql.Result, error) {
	trackPlatformCallbackLogIdKey := fmt.Sprintf("%s%v", cacheTrackPlatformCallbackLogIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, trackPlatformCallbackLogRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.TraceId, data.CallbackId, data.DeliveryNo, data.ExternalOrderNo, data.PlatformCode, data.PlatformOrderNo, data.CallbackType, data.CallbackEvent, data.RequestMethod, data.RequestUrl, data.RequestHeaders, data.RequestBody, data.RequestIp, data.Signature, data.SignatureType, data.VerifyResult, data.VerifyError, data.BusinessData, data.OrderStatus, data.CourierInfo, data.LocationInfo, data.IsProcessed, data.ProcessResult, data.ProcessError, data.ProcessDuration, data.ProcessedAt, data.ResponseCode, data.ResponseBody, data.IsDuplicate, data.DuplicateCount, data.ExtraData, data.CityCode)
	}, trackPlatformCallbackLogIdKey)
	return ret, err
}

func (m *defaultTrackPlatformCallbackLogModel) Update(ctx context.Context, data *TrackPlatformCallbackLog) error {
	trackPlatformCallbackLogIdKey := fmt.Sprintf("%s%v", cacheTrackPlatformCallbackLogIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, trackPlatformCallbackLogRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.TraceId, data.CallbackId, data.DeliveryNo, data.ExternalOrderNo, data.PlatformCode, data.PlatformOrderNo, data.CallbackType, data.CallbackEvent, data.RequestMethod, data.RequestUrl, data.RequestHeaders, data.RequestBody, data.RequestIp, data.Signature, data.SignatureType, data.VerifyResult, data.VerifyError, data.BusinessData, data.OrderStatus, data.CourierInfo, data.LocationInfo, data.IsProcessed, data.ProcessResult, data.ProcessError, data.ProcessDuration, data.ProcessedAt, data.ResponseCode, data.ResponseBody, data.IsDuplicate, data.DuplicateCount, data.ExtraData, data.CityCode, data.Id)
	}, trackPlatformCallbackLogIdKey)
	return err
}

func (m *defaultTrackPlatformCallbackLogModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheTrackPlatformCallbackLogIdPrefix, primary)
}

func (m *defaultTrackPlatformCallbackLogModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", trackPlatformCallbackLogRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTrackPlatformCallbackLogModel) tableName() string {
	return m.table
}
