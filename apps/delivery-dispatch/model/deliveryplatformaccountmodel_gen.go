// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	deliveryPlatformAccountFieldNames          = builder.RawFieldNames(&DeliveryPlatformAccount{})
	deliveryPlatformAccountRows                = strings.Join(deliveryPlatformAccountFieldNames, ",")
	deliveryPlatformAccountRowsExpectAutoSet   = strings.Join(stringx.Remove(deliveryPlatformAccountFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	deliveryPlatformAccountRowsWithPlaceHolder = strings.Join(stringx.Remove(deliveryPlatformAccountFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheCdtsDeliveryDbDeliveryPlatformAccountIdPrefix          = "cache:cdtsDeliveryDb:deliveryPlatformAccount:id:"
	cacheCdtsDeliveryDbDeliveryPlatformAccountAccountCodePrefix = "cache:cdtsDeliveryDb:deliveryPlatformAccount:accountCode:"
)

type (
	deliveryPlatformAccountModel interface {
		Insert(ctx context.Context, data *DeliveryPlatformAccount) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*DeliveryPlatformAccount, error)
		FindOneByAccountCode(ctx context.Context, accountCode string) (*DeliveryPlatformAccount, error)
		Update(ctx context.Context, data *DeliveryPlatformAccount) error
	}

	defaultDeliveryPlatformAccountModel struct {
		sqlc.CachedConn
		table string
	}

	DeliveryPlatformAccount struct {
		Id             int64     `db:"id"`               // 主键ID
		PlatformId     int64     `db:"platform_id"`      // 平台ID
		AccountCode    string    `db:"account_code"`     // 账号编码(唯一标识)
		AccountName    string    `db:"account_name"`     // 账号名称
		Status         int64     `db:"status"`           // 账号状态：1启用 0禁用
		ApiBaseUrl     string    `db:"api_base_url"`     // API基础地址
		AppId          string    `db:"app_id"`           // 应用ID
		AppKey         string    `db:"app_key"`          // 应用Key
		AppSecret      string    `db:"app_secret"`       // 应用Secret
		AccessToken    string    `db:"access_token"`     // 访问令牌
		TokenExpiresAt time.Time `db:"token_expires_at"` // Token过期时间
		WebhookUrl     string    `db:"webhook_url"`      // 回调地址
		WebhookSecret  string    `db:"webhook_secret"`   // 回调密钥
		TimeoutMs      int64     `db:"timeout_ms"`       // 超时时间(毫秒)
		RetryTimes     int64     `db:"retry_times"`      // 重试次数
		Weight         int64     `db:"weight"`           // 账号权重
		Priority       int64     `db:"priority"`         // 优先级(数字越小优先级越高)
		ExtraConfig    string    `db:"extra_config"`     // 扩展配置(JSON格式)
		Remark         string    `db:"remark"`           // 备注
		CreatedAt      time.Time `db:"created_at"`
		UpdatedAt      time.Time `db:"updated_at"`
	}
)

func newDeliveryPlatformAccountModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultDeliveryPlatformAccountModel {
	return &defaultDeliveryPlatformAccountModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`delivery_platform_account`",
	}
}

func (m *defaultDeliveryPlatformAccountModel) FindOne(ctx context.Context, id int64) (*DeliveryPlatformAccount, error) {
	cdtsDeliveryDbDeliveryPlatformAccountIdKey := fmt.Sprintf("%s%v", cacheCdtsDeliveryDbDeliveryPlatformAccountIdPrefix, id)
	var resp DeliveryPlatformAccount
	err := m.QueryRowCtx(ctx, &resp, cdtsDeliveryDbDeliveryPlatformAccountIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", deliveryPlatformAccountRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDeliveryPlatformAccountModel) FindOneByAccountCode(ctx context.Context, accountCode string) (*DeliveryPlatformAccount, error) {
	cdtsDeliveryDbDeliveryPlatformAccountAccountCodeKey := fmt.Sprintf("%s%v", cacheCdtsDeliveryDbDeliveryPlatformAccountAccountCodePrefix, accountCode)
	var resp DeliveryPlatformAccount
	err := m.QueryRowIndexCtx(ctx, &resp, cdtsDeliveryDbDeliveryPlatformAccountAccountCodeKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `account_code` = ? limit 1", deliveryPlatformAccountRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, accountCode); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDeliveryPlatformAccountModel) Insert(ctx context.Context, data *DeliveryPlatformAccount) (sql.Result, error) {
	cdtsDeliveryDbDeliveryPlatformAccountAccountCodeKey := fmt.Sprintf("%s%v", cacheCdtsDeliveryDbDeliveryPlatformAccountAccountCodePrefix, data.AccountCode)
	cdtsDeliveryDbDeliveryPlatformAccountIdKey := fmt.Sprintf("%s%v", cacheCdtsDeliveryDbDeliveryPlatformAccountIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, deliveryPlatformAccountRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.PlatformId, data.AccountCode, data.AccountName, data.Status, data.ApiBaseUrl, data.AppId, data.AppKey, data.AppSecret, data.AccessToken, data.TokenExpiresAt, data.WebhookUrl, data.WebhookSecret, data.TimeoutMs, data.RetryTimes, data.Weight, data.Priority, data.ExtraConfig, data.Remark)
	}, cdtsDeliveryDbDeliveryPlatformAccountAccountCodeKey, cdtsDeliveryDbDeliveryPlatformAccountIdKey)
	return ret, err
}

func (m *defaultDeliveryPlatformAccountModel) Update(ctx context.Context, newData *DeliveryPlatformAccount) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	cdtsDeliveryDbDeliveryPlatformAccountAccountCodeKey := fmt.Sprintf("%s%v", cacheCdtsDeliveryDbDeliveryPlatformAccountAccountCodePrefix, data.AccountCode)
	cdtsDeliveryDbDeliveryPlatformAccountIdKey := fmt.Sprintf("%s%v", cacheCdtsDeliveryDbDeliveryPlatformAccountIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, deliveryPlatformAccountRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.PlatformId, newData.AccountCode, newData.AccountName, newData.Status, newData.ApiBaseUrl, newData.AppId, newData.AppKey, newData.AppSecret, newData.AccessToken, newData.TokenExpiresAt, newData.WebhookUrl, newData.WebhookSecret, newData.TimeoutMs, newData.RetryTimes, newData.Weight, newData.Priority, newData.ExtraConfig, newData.Remark, newData.Id)
	}, cdtsDeliveryDbDeliveryPlatformAccountAccountCodeKey, cdtsDeliveryDbDeliveryPlatformAccountIdKey)
	return err
}

func (m *defaultDeliveryPlatformAccountModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheCdtsDeliveryDbDeliveryPlatformAccountIdPrefix, primary)
}

func (m *defaultDeliveryPlatformAccountModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", deliveryPlatformAccountRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultDeliveryPlatformAccountModel) tableName() string {
	return m.table
}
