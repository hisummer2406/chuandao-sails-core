// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	dispatchCancelLogFieldNames          = builder.RawFieldNames(&DispatchCancelLog{})
	dispatchCancelLogRows                = strings.Join(dispatchCancelLogFieldNames, ",")
	dispatchCancelLogRowsExpectAutoSet   = strings.Join(stringx.Remove(dispatchCancelLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	dispatchCancelLogRowsWithPlaceHolder = strings.Join(stringx.Remove(dispatchCancelLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheDispatchCancelLogIdPrefix = "cache:dispatchCancelLog:id:"
)

type (
	dispatchCancelLogModel interface {
		Insert(ctx context.Context, data *DispatchCancelLog) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*DispatchCancelLog, error)
		Update(ctx context.Context, data *DispatchCancelLog) error
	}

	defaultDispatchCancelLogModel struct {
		sqlc.CachedConn
		table string
	}

	DispatchCancelLog struct {
		Id                   uint64    `db:"id"`                     // 主键ID
		DeliveryNo           string    `db:"delivery_no"`            // 配送单号
		ExternalOrderNo      string    `db:"external_order_no"`      // 外部订单号（调用方传入）
		PlatformCode         string    `db:"platform_code"`          // 配送平台代码
		PlatformOrderNo      string    `db:"platform_order_no"`      // 平台订单号
		CancelType           string    `db:"cancel_type"`            // 取消类型：USER/PLATFORM/SYSTEM/TIMEOUT
		CancelReasonId       string    `db:"cancel_reason_id"`       // 取消原因ID
		CancelReason         string    `db:"cancel_reason"`          // 取消原因描述
		CancelOperator       string    `db:"cancel_operator"`        // 取消操作人
		CancelSource         string    `db:"cancel_source"`          // 取消来源：API/CALLBACK/AUTO
		OrderStatus          string    `db:"order_status"`           // 取消时订单状态
		IsPicked             int64     `db:"is_picked"`              // 是否已取件：1是 0否
		PenaltyFee           float64   `db:"penalty_fee"`            // 违约金（元）
		PenaltyRule          string    `db:"penalty_rule"`           // 违约金规则
		IsPenaltyPaid        int64     `db:"is_penalty_paid"`        // 是否已支付违约金：1是 0否
		RefundAmount         float64   `db:"refund_amount"`          // 退款金额（元）
		RefundStatus         string    `db:"refund_status"`          // 退款状态：PENDING/SUCCESS/FAILED
		PlatformResponseCode string    `db:"platform_response_code"` // 平台响应码
		PlatformResponseMsg  string    `db:"platform_response_msg"`  // 平台响应消息
		IsCancelSuccess      int64     `db:"is_cancel_success"`      // 是否取消成功：1成功 0失败
		OrderCreatedAt       time.Time `db:"order_created_at"`       // 订单创建时间
		CancelRequestedAt    time.Time `db:"cancel_requested_at"`    // 取消请求时间
		CancelConfirmedAt    time.Time `db:"cancel_confirmed_at"`    // 取消确认时间
		ExtraData            string    `db:"extra_data"`             // 扩展数据
		CityCode             string    `db:"city_code"`              // 城市编码
		CreatedAt            time.Time `db:"created_at"`             // 创建时间
		UpdatedAt            time.Time `db:"updated_at"`             // 更新时间
	}
)

func newDispatchCancelLogModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultDispatchCancelLogModel {
	return &defaultDispatchCancelLogModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`dispatch_cancel_log`",
	}
}

func (m *defaultDispatchCancelLogModel) FindOne(ctx context.Context, id uint64) (*DispatchCancelLog, error) {
	dispatchCancelLogIdKey := fmt.Sprintf("%s%v", cacheDispatchCancelLogIdPrefix, id)
	var resp DispatchCancelLog
	err := m.QueryRowCtx(ctx, &resp, dispatchCancelLogIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", dispatchCancelLogRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDispatchCancelLogModel) Insert(ctx context.Context, data *DispatchCancelLog) (sql.Result, error) {
	dispatchCancelLogIdKey := fmt.Sprintf("%s%v", cacheDispatchCancelLogIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, dispatchCancelLogRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.DeliveryNo, data.ExternalOrderNo, data.PlatformCode, data.PlatformOrderNo, data.CancelType, data.CancelReasonId, data.CancelReason, data.CancelOperator, data.CancelSource, data.OrderStatus, data.IsPicked, data.PenaltyFee, data.PenaltyRule, data.IsPenaltyPaid, data.RefundAmount, data.RefundStatus, data.PlatformResponseCode, data.PlatformResponseMsg, data.IsCancelSuccess, data.OrderCreatedAt, data.CancelRequestedAt, data.CancelConfirmedAt, data.ExtraData, data.CityCode)
	}, dispatchCancelLogIdKey)
	return ret, err
}

func (m *defaultDispatchCancelLogModel) Update(ctx context.Context, data *DispatchCancelLog) error {
	dispatchCancelLogIdKey := fmt.Sprintf("%s%v", cacheDispatchCancelLogIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, dispatchCancelLogRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.DeliveryNo, data.ExternalOrderNo, data.PlatformCode, data.PlatformOrderNo, data.CancelType, data.CancelReasonId, data.CancelReason, data.CancelOperator, data.CancelSource, data.OrderStatus, data.IsPicked, data.PenaltyFee, data.PenaltyRule, data.IsPenaltyPaid, data.RefundAmount, data.RefundStatus, data.PlatformResponseCode, data.PlatformResponseMsg, data.IsCancelSuccess, data.OrderCreatedAt, data.CancelRequestedAt, data.CancelConfirmedAt, data.ExtraData, data.CityCode, data.Id)
	}, dispatchCancelLogIdKey)
	return err
}

func (m *defaultDispatchCancelLogModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheDispatchCancelLogIdPrefix, primary)
}

func (m *defaultDispatchCancelLogModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", dispatchCancelLogRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultDispatchCancelLogModel) tableName() string {
	return m.table
}
