// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	dispatchOrderFieldNames          = builder.RawFieldNames(&DispatchOrder{})
	dispatchOrderRows                = strings.Join(dispatchOrderFieldNames, ",")
	dispatchOrderRowsExpectAutoSet   = strings.Join(stringx.Remove(dispatchOrderFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	dispatchOrderRowsWithPlaceHolder = strings.Join(stringx.Remove(dispatchOrderFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheDispatchOrderIdPrefix      = "cache:dispatchOrder:id:"
	cacheDispatchOrderOrderNoPrefix = "cache:dispatchOrder:orderNo:"
)

type (
	dispatchOrderModel interface {
		Insert(ctx context.Context, data *DispatchOrder) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*DispatchOrder, error)
		FindOneByOrderNo(ctx context.Context, orderNo string) (*DispatchOrder, error)
		Update(ctx context.Context, data *DispatchOrder) error
	}

	defaultDispatchOrderModel struct {
		sqlc.CachedConn
		table string
	}

	DispatchOrder struct {
		Id              uint64    `db:"id"`                // 主键ID
		OrderNo         string    `db:"order_no"`          // 系统单号
		OriginOrderId   string    `db:"origin_order_id"`   // 对接第三方的订单号
		UpstreamSource  string    `db:"upstream_source"`   // 上游推单来源
		UpstreamOrderId string    `db:"upstream_order_id"` // 上游平台订单号
		DeliveryCode    string    `db:"delivery_code"`     // 配送平台代码：UU/DD
		DeliveryOrderNo string    `db:"delivery_order_no"` // 配送订单号
		ShortNum        int64     `db:"short_num"`         // 取餐号
		AccountId       int64     `db:"account_id"`        // 使用账号
		SourceAppId     string    `db:"source_app_id"`     // 来源appid
		InquiryId       int64     `db:"inquiry_id"`        // 询价记录ID
		Status          string    `db:"status"`            // 订单状态
		FromMobile      string    `db:"from_mobile"`       // 发货手机号
		FromAddress     string    `db:"from_address"`      // 起点地址
		ToMobile        string    `db:"to_mobile"`         // 收货手机号
		ToAddress       string    `db:"to_address"`        // 终点地址
		Note            string    `db:"note"`              // 下单备注
		GoodsName       string    `db:"goods_name"`        // 货物名称
		GoodsType       int64     `db:"goods_type"`        // 商品类型
		GoodsDetail     string    `db:"goods_detail"`      // 货物详情
		TotalAmount     int64     `db:"total_amount"`      // 发单价格(分)
		PriceDetail     string    `db:"price_detail"`      // 价格详情
		Distance        int64     `db:"distance"`          // 配送距离(米)
		DriverName      string    `db:"driver_name"`       // 配送员
		DriverMobile    string    `db:"driver_mobile"`     // 配送员电话
		ShopId          int64     `db:"shop_id"`           // 门店ID
		SubscribeType   int64     `db:"subscribe_type"`    // 预约类型
		SubscribeTime   string    `db:"subscribe_time"`    // 预计时间
		DisableDelivery string    `db:"disable_delivery"`  // 禁用运力
		CreatedAt       time.Time `db:"created_at"`        // 创建时间
		UpdatedAt       time.Time `db:"updated_at"`        // 更新时间
	}
)

func newDispatchOrderModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultDispatchOrderModel {
	return &defaultDispatchOrderModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`dispatch_order`",
	}
}

func (m *defaultDispatchOrderModel) FindOne(ctx context.Context, id uint64) (*DispatchOrder, error) {
	dispatchOrderIdKey := fmt.Sprintf("%s%v", cacheDispatchOrderIdPrefix, id)
	var resp DispatchOrder
	err := m.QueryRowCtx(ctx, &resp, dispatchOrderIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", dispatchOrderRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDispatchOrderModel) FindOneByOrderNo(ctx context.Context, orderNo string) (*DispatchOrder, error) {
	dispatchOrderOrderNoKey := fmt.Sprintf("%s%v", cacheDispatchOrderOrderNoPrefix, orderNo)
	var resp DispatchOrder
	err := m.QueryRowIndexCtx(ctx, &resp, dispatchOrderOrderNoKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `order_no` = ? limit 1", dispatchOrderRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, orderNo); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDispatchOrderModel) Insert(ctx context.Context, data *DispatchOrder) (sql.Result, error) {
	dispatchOrderIdKey := fmt.Sprintf("%s%v", cacheDispatchOrderIdPrefix, data.Id)
	dispatchOrderOrderNoKey := fmt.Sprintf("%s%v", cacheDispatchOrderOrderNoPrefix, data.OrderNo)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, dispatchOrderRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.OrderNo, data.OriginOrderId, data.UpstreamSource, data.UpstreamOrderId, data.DeliveryCode, data.DeliveryOrderNo, data.ShortNum, data.AccountId, data.SourceAppId, data.InquiryId, data.Status, data.FromMobile, data.FromAddress, data.ToMobile, data.ToAddress, data.Note, data.GoodsName, data.GoodsType, data.GoodsDetail, data.TotalAmount, data.PriceDetail, data.Distance, data.DriverName, data.DriverMobile, data.ShopId, data.SubscribeType, data.SubscribeTime, data.DisableDelivery)
	}, dispatchOrderIdKey, dispatchOrderOrderNoKey)
	return ret, err
}

func (m *defaultDispatchOrderModel) Update(ctx context.Context, newData *DispatchOrder) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	dispatchOrderIdKey := fmt.Sprintf("%s%v", cacheDispatchOrderIdPrefix, data.Id)
	dispatchOrderOrderNoKey := fmt.Sprintf("%s%v", cacheDispatchOrderOrderNoPrefix, data.OrderNo)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, dispatchOrderRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.OrderNo, newData.OriginOrderId, newData.UpstreamSource, newData.UpstreamOrderId, newData.DeliveryCode, newData.DeliveryOrderNo, newData.ShortNum, newData.AccountId, newData.SourceAppId, newData.InquiryId, newData.Status, newData.FromMobile, newData.FromAddress, newData.ToMobile, newData.ToAddress, newData.Note, newData.GoodsName, newData.GoodsType, newData.GoodsDetail, newData.TotalAmount, newData.PriceDetail, newData.Distance, newData.DriverName, newData.DriverMobile, newData.ShopId, newData.SubscribeType, newData.SubscribeTime, newData.DisableDelivery, newData.Id)
	}, dispatchOrderIdKey, dispatchOrderOrderNoKey)
	return err
}

func (m *defaultDispatchOrderModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheDispatchOrderIdPrefix, primary)
}

func (m *defaultDispatchOrderModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", dispatchOrderRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultDispatchOrderModel) tableName() string {
	return m.table
}
