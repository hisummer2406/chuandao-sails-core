// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	dispatchInquiryLogFieldNames          = builder.RawFieldNames(&DispatchInquiryLog{})
	dispatchInquiryLogRows                = strings.Join(dispatchInquiryLogFieldNames, ",")
	dispatchInquiryLogRowsExpectAutoSet   = strings.Join(stringx.Remove(dispatchInquiryLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	dispatchInquiryLogRowsWithPlaceHolder = strings.Join(stringx.Remove(dispatchInquiryLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheDispatchInquiryLogIdPrefix = "cache:dispatchInquiryLog:id:"
)

type (
	dispatchInquiryLogModel interface {
		Insert(ctx context.Context, data *DispatchInquiryLog) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*DispatchInquiryLog, error)
		Update(ctx context.Context, data *DispatchInquiryLog) error
	}

	defaultDispatchInquiryLogModel struct {
		sqlc.CachedConn
		table string
	}

	DispatchInquiryLog struct {
		Id               uint64    `db:"id"`                // 主键ID
		OrderNo          string    `db:"order_no"`          // 订单号
		FromAddress      string    `db:"from_address"`      // 起点地址
		ToAddress        string    `db:"to_address"`        // 终点地址
		Status           string    `db:"status"`            // 状态：processing/success/failed
		GoodsType        string    `db:"goods_type"`        // 物品类型
		DeliveryCodes    string    `db:"delivery_codes"`    // 询价平台(逗号分隔)
		SuccessPlatforms string    `db:"success_platforms"` // 成功平台(逗号分隔)
		TotalDuration    int64     `db:"total_duration"`    // 总耗时(毫秒)
		CreatedAt        time.Time `db:"created_at"`        // 创建时间
	}
)

func newDispatchInquiryLogModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultDispatchInquiryLogModel {
	return &defaultDispatchInquiryLogModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`dispatch_inquiry_log`",
	}
}

func (m *defaultDispatchInquiryLogModel) FindOne(ctx context.Context, id uint64) (*DispatchInquiryLog, error) {
	dispatchInquiryLogIdKey := fmt.Sprintf("%s%v", cacheDispatchInquiryLogIdPrefix, id)
	var resp DispatchInquiryLog
	err := m.QueryRowCtx(ctx, &resp, dispatchInquiryLogIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", dispatchInquiryLogRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDispatchInquiryLogModel) Insert(ctx context.Context, data *DispatchInquiryLog) (sql.Result, error) {
	dispatchInquiryLogIdKey := fmt.Sprintf("%s%v", cacheDispatchInquiryLogIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, dispatchInquiryLogRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.OrderNo, data.FromAddress, data.ToAddress, data.Status, data.GoodsType, data.DeliveryCodes, data.SuccessPlatforms, data.TotalDuration)
	}, dispatchInquiryLogIdKey)
	return ret, err
}

func (m *defaultDispatchInquiryLogModel) Update(ctx context.Context, data *DispatchInquiryLog) error {
	dispatchInquiryLogIdKey := fmt.Sprintf("%s%v", cacheDispatchInquiryLogIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, dispatchInquiryLogRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.OrderNo, data.FromAddress, data.ToAddress, data.Status, data.GoodsType, data.DeliveryCodes, data.SuccessPlatforms, data.TotalDuration, data.Id)
	}, dispatchInquiryLogIdKey)
	return err
}

func (m *defaultDispatchInquiryLogModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheDispatchInquiryLogIdPrefix, primary)
}

func (m *defaultDispatchInquiryLogModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", dispatchInquiryLogRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultDispatchInquiryLogModel) tableName() string {
	return m.table
}
