// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	dispatchExceptionLogFieldNames          = builder.RawFieldNames(&DispatchExceptionLog{})
	dispatchExceptionLogRows                = strings.Join(dispatchExceptionLogFieldNames, ",")
	dispatchExceptionLogRowsExpectAutoSet   = strings.Join(stringx.Remove(dispatchExceptionLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	dispatchExceptionLogRowsWithPlaceHolder = strings.Join(stringx.Remove(dispatchExceptionLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheDispatchExceptionLogIdPrefix = "cache:dispatchExceptionLog:id:"
)

type (
	dispatchExceptionLogModel interface {
		Insert(ctx context.Context, data *DispatchExceptionLog) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*DispatchExceptionLog, error)
		Update(ctx context.Context, data *DispatchExceptionLog) error
	}

	defaultDispatchExceptionLogModel struct {
		sqlc.CachedConn
		table string
	}

	DispatchExceptionLog struct {
		Id               uint64    `db:"id"`                // 主键ID
		DeliveryNo       string    `db:"delivery_no"`       // 配送单号
		ExternalOrderNo  string    `db:"external_order_no"` // 外部订单号
		PlatformCode     string    `db:"platform_code"`     // 配送平台代码
		PlatformOrderNo  string    `db:"platform_order_no"` // 平台订单号
		ExceptionType    string    `db:"exception_type"`    // 异常类型:TIMEOUT/DISPATCH_FAIL/PLATFORM_ERROR/COURIER_REFUSE/ADDRESS_ERROR
		ExceptionLevel   string    `db:"exception_level"`   // 异常等级:LOW/NORMAL/HIGH/CRITICAL
		ExceptionCode    string    `db:"exception_code"`    // 异常码
		ExceptionMessage string    `db:"exception_message"` // 异常描述
		ExceptionStack   string    `db:"exception_stack"`   // 异常堆栈
		OrderStatus      string    `db:"order_status"`      // 异常时订单状态
		OperationType    string    `db:"operation_type"`    // 操作类型:INQUIRY/DISPATCH/CANCEL/QUERY/CALLBACK
		RequestData      string    `db:"request_data"`      // 请求数据
		ResponseData     string    `db:"response_data"`     // 响应数据
		Duration         int64     `db:"duration"`          // 耗时(毫秒)
		IsResolved       int64     `db:"is_resolved"`       // 是否已解决:1是0否
		ResolvedBy       string    `db:"resolved_by"`       // 解决人
		ResolvedAt       time.Time `db:"resolved_at"`       // 解决时间
		ResolvedMethod   string    `db:"resolved_method"`   // 解决方法
		RetryCount       int64     `db:"retry_count"`       // 重试次数
		MaxRetry         int64     `db:"max_retry"`         // 最大重试次数
		NextRetryTime    time.Time `db:"next_retry_time"`   // 下次重试时间
		IsAlerted        int64     `db:"is_alerted"`        // 是否已告警:1是0否
		AlertChannel     string    `db:"alert_channel"`     // 告警渠道:SMS/EMAIL/DINGTALK/WECHAT
		AlertReceiver    string    `db:"alert_receiver"`    // 告警接收人
		ExtraData        string    `db:"extra_data"`        // 扩展数据
		CityCode         string    `db:"city_code"`         // 城市编码
		CreatedAt        time.Time `db:"created_at"`        // 创建时间
		UpdatedAt        time.Time `db:"updated_at"`        // 更新时间
	}
)

func newDispatchExceptionLogModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultDispatchExceptionLogModel {
	return &defaultDispatchExceptionLogModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`dispatch_exception_log`",
	}
}

func (m *defaultDispatchExceptionLogModel) FindOne(ctx context.Context, id uint64) (*DispatchExceptionLog, error) {
	dispatchExceptionLogIdKey := fmt.Sprintf("%s%v", cacheDispatchExceptionLogIdPrefix, id)
	var resp DispatchExceptionLog
	err := m.QueryRowCtx(ctx, &resp, dispatchExceptionLogIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", dispatchExceptionLogRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDispatchExceptionLogModel) Insert(ctx context.Context, data *DispatchExceptionLog) (sql.Result, error) {
	dispatchExceptionLogIdKey := fmt.Sprintf("%s%v", cacheDispatchExceptionLogIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, dispatchExceptionLogRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.DeliveryNo, data.ExternalOrderNo, data.PlatformCode, data.PlatformOrderNo, data.ExceptionType, data.ExceptionLevel, data.ExceptionCode, data.ExceptionMessage, data.ExceptionStack, data.OrderStatus, data.OperationType, data.RequestData, data.ResponseData, data.Duration, data.IsResolved, data.ResolvedBy, data.ResolvedAt, data.ResolvedMethod, data.RetryCount, data.MaxRetry, data.NextRetryTime, data.IsAlerted, data.AlertChannel, data.AlertReceiver, data.ExtraData, data.CityCode)
	}, dispatchExceptionLogIdKey)
	return ret, err
}

func (m *defaultDispatchExceptionLogModel) Update(ctx context.Context, data *DispatchExceptionLog) error {
	dispatchExceptionLogIdKey := fmt.Sprintf("%s%v", cacheDispatchExceptionLogIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, dispatchExceptionLogRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.DeliveryNo, data.ExternalOrderNo, data.PlatformCode, data.PlatformOrderNo, data.ExceptionType, data.ExceptionLevel, data.ExceptionCode, data.ExceptionMessage, data.ExceptionStack, data.OrderStatus, data.OperationType, data.RequestData, data.ResponseData, data.Duration, data.IsResolved, data.ResolvedBy, data.ResolvedAt, data.ResolvedMethod, data.RetryCount, data.MaxRetry, data.NextRetryTime, data.IsAlerted, data.AlertChannel, data.AlertReceiver, data.ExtraData, data.CityCode, data.Id)
	}, dispatchExceptionLogIdKey)
	return err
}

func (m *defaultDispatchExceptionLogModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheDispatchExceptionLogIdPrefix, primary)
}

func (m *defaultDispatchExceptionLogModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", dispatchExceptionLogRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultDispatchExceptionLogModel) tableName() string {
	return m.table
}
