// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	strategyDispatchConfigFieldNames          = builder.RawFieldNames(&StrategyDispatchConfig{})
	strategyDispatchConfigRows                = strings.Join(strategyDispatchConfigFieldNames, ",")
	strategyDispatchConfigRowsExpectAutoSet   = strings.Join(stringx.Remove(strategyDispatchConfigFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	strategyDispatchConfigRowsWithPlaceHolder = strings.Join(stringx.Remove(strategyDispatchConfigFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheCdtsDeliveryDbStrategyDispatchConfigIdPrefix           = "cache:cdtsDeliveryDb:strategyDispatchConfig:id:"
	cacheCdtsDeliveryDbStrategyDispatchConfigStrategyCodePrefix = "cache:cdtsDeliveryDb:strategyDispatchConfig:strategyCode:"
)

type (
	strategyDispatchConfigModel interface {
		Insert(ctx context.Context, data *StrategyDispatchConfig) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*StrategyDispatchConfig, error)
		FindOneByStrategyCode(ctx context.Context, strategyCode string) (*StrategyDispatchConfig, error)
		Update(ctx context.Context, data *StrategyDispatchConfig) error
	}

	defaultStrategyDispatchConfigModel struct {
		sqlc.CachedConn
		table string
	}

	StrategyDispatchConfig struct {
		Id             uint64    `db:"id"`              // 主键ID
		StrategyCode   string    `db:"strategy_code"`   // 策略代码（唯一标识）
		StrategyName   string    `db:"strategy_name"`   // 策略名称
		StrategyDesc   string    `db:"strategy_desc"`   // 策略描述
		StrategyConfig string    `db:"strategy_config"` // 策略配置JSON
		IsDefault      int64     `db:"is_default"`      // 是否默认策略：1是 0否
		IsEnabled      int64     `db:"is_enabled"`      // 是否启用：1是 0否
		Priority       int64     `db:"priority"`        // 优先级（数字越大越优先）
		CreatedBy      string    `db:"created_by"`      // 创建人
		UpdatedBy      string    `db:"updated_by"`      // 更新人
		CreatedAt      time.Time `db:"created_at"`      // 创建时间
		UpdatedAt      time.Time `db:"updated_at"`      // 更新时间
	}
)

func newStrategyDispatchConfigModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultStrategyDispatchConfigModel {
	return &defaultStrategyDispatchConfigModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`strategy_dispatch_config`",
	}
}

func (m *defaultStrategyDispatchConfigModel) FindOne(ctx context.Context, id uint64) (*StrategyDispatchConfig, error) {
	cdtsDeliveryDbStrategyDispatchConfigIdKey := fmt.Sprintf("%s%v", cacheCdtsDeliveryDbStrategyDispatchConfigIdPrefix, id)
	var resp StrategyDispatchConfig
	err := m.QueryRowCtx(ctx, &resp, cdtsDeliveryDbStrategyDispatchConfigIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", strategyDispatchConfigRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStrategyDispatchConfigModel) FindOneByStrategyCode(ctx context.Context, strategyCode string) (*StrategyDispatchConfig, error) {
	cdtsDeliveryDbStrategyDispatchConfigStrategyCodeKey := fmt.Sprintf("%s%v", cacheCdtsDeliveryDbStrategyDispatchConfigStrategyCodePrefix, strategyCode)
	var resp StrategyDispatchConfig
	err := m.QueryRowIndexCtx(ctx, &resp, cdtsDeliveryDbStrategyDispatchConfigStrategyCodeKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `strategy_code` = ? limit 1", strategyDispatchConfigRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, strategyCode); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStrategyDispatchConfigModel) Insert(ctx context.Context, data *StrategyDispatchConfig) (sql.Result, error) {
	cdtsDeliveryDbStrategyDispatchConfigIdKey := fmt.Sprintf("%s%v", cacheCdtsDeliveryDbStrategyDispatchConfigIdPrefix, data.Id)
	cdtsDeliveryDbStrategyDispatchConfigStrategyCodeKey := fmt.Sprintf("%s%v", cacheCdtsDeliveryDbStrategyDispatchConfigStrategyCodePrefix, data.StrategyCode)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, strategyDispatchConfigRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.StrategyCode, data.StrategyName, data.StrategyDesc, data.StrategyConfig, data.IsDefault, data.IsEnabled, data.Priority, data.CreatedBy, data.UpdatedBy)
	}, cdtsDeliveryDbStrategyDispatchConfigIdKey, cdtsDeliveryDbStrategyDispatchConfigStrategyCodeKey)
	return ret, err
}

func (m *defaultStrategyDispatchConfigModel) Update(ctx context.Context, newData *StrategyDispatchConfig) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	cdtsDeliveryDbStrategyDispatchConfigIdKey := fmt.Sprintf("%s%v", cacheCdtsDeliveryDbStrategyDispatchConfigIdPrefix, data.Id)
	cdtsDeliveryDbStrategyDispatchConfigStrategyCodeKey := fmt.Sprintf("%s%v", cacheCdtsDeliveryDbStrategyDispatchConfigStrategyCodePrefix, data.StrategyCode)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, strategyDispatchConfigRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.StrategyCode, newData.StrategyName, newData.StrategyDesc, newData.StrategyConfig, newData.IsDefault, newData.IsEnabled, newData.Priority, newData.CreatedBy, newData.UpdatedBy, newData.Id)
	}, cdtsDeliveryDbStrategyDispatchConfigIdKey, cdtsDeliveryDbStrategyDispatchConfigStrategyCodeKey)
	return err
}

func (m *defaultStrategyDispatchConfigModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheCdtsDeliveryDbStrategyDispatchConfigIdPrefix, primary)
}

func (m *defaultStrategyDispatchConfigModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", strategyDispatchConfigRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultStrategyDispatchConfigModel) tableName() string {
	return m.table
}
