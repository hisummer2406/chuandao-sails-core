// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	deliveryCategoryMappingFieldNames          = builder.RawFieldNames(&DeliveryCategoryMapping{})
	deliveryCategoryMappingRows                = strings.Join(deliveryCategoryMappingFieldNames, ",")
	deliveryCategoryMappingRowsExpectAutoSet   = strings.Join(stringx.Remove(deliveryCategoryMappingFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	deliveryCategoryMappingRowsWithPlaceHolder = strings.Join(stringx.Remove(deliveryCategoryMappingFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheCdtsDeliveryDbDeliveryCategoryMappingIdPrefix           = "cache:cdtsDeliveryDb:deliveryCategoryMapping:id:"
	cacheCdtsDeliveryDbDeliveryCategoryMappingCategoryCodePrefix = "cache:cdtsDeliveryDb:deliveryCategoryMapping:categoryCode:"
)

type (
	deliveryCategoryMappingModel interface {
		Insert(ctx context.Context, data *DeliveryCategoryMapping) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*DeliveryCategoryMapping, error)
		FindOneByCategoryCode(ctx context.Context, categoryCode string) (*DeliveryCategoryMapping, error)
		Update(ctx context.Context, data *DeliveryCategoryMapping) error
	}

	defaultDeliveryCategoryMappingModel struct {
		sqlc.CachedConn
		table string
	}

	DeliveryCategoryMapping struct {
		Id               uint64    `db:"id"`
		CategoryCode     string    `db:"category_code"`     // 类目编码(唯一标识)
		CategoryName     string    `db:"category_name"`     // 类目名称
		PlatformMappings string    `db:"platform_mappings"` // 平台类目映射
		PriceConfig      string    `db:"price_config"`      // 价格配置
		Status           int64     `db:"status"`            // 状态:1启用 0禁用
		CreatedAt        time.Time `db:"created_at"`
		UpdatedAt        time.Time `db:"updated_at"`
	}
)

func newDeliveryCategoryMappingModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultDeliveryCategoryMappingModel {
	return &defaultDeliveryCategoryMappingModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`delivery_category_mapping`",
	}
}

func (m *defaultDeliveryCategoryMappingModel) FindOne(ctx context.Context, id uint64) (*DeliveryCategoryMapping, error) {
	cdtsDeliveryDbDeliveryCategoryMappingIdKey := fmt.Sprintf("%s%v", cacheCdtsDeliveryDbDeliveryCategoryMappingIdPrefix, id)
	var resp DeliveryCategoryMapping
	err := m.QueryRowCtx(ctx, &resp, cdtsDeliveryDbDeliveryCategoryMappingIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", deliveryCategoryMappingRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDeliveryCategoryMappingModel) FindOneByCategoryCode(ctx context.Context, categoryCode string) (*DeliveryCategoryMapping, error) {
	cdtsDeliveryDbDeliveryCategoryMappingCategoryCodeKey := fmt.Sprintf("%s%v", cacheCdtsDeliveryDbDeliveryCategoryMappingCategoryCodePrefix, categoryCode)
	var resp DeliveryCategoryMapping
	err := m.QueryRowIndexCtx(ctx, &resp, cdtsDeliveryDbDeliveryCategoryMappingCategoryCodeKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `category_code` = ? limit 1", deliveryCategoryMappingRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, categoryCode); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDeliveryCategoryMappingModel) Insert(ctx context.Context, data *DeliveryCategoryMapping) (sql.Result, error) {
	cdtsDeliveryDbDeliveryCategoryMappingCategoryCodeKey := fmt.Sprintf("%s%v", cacheCdtsDeliveryDbDeliveryCategoryMappingCategoryCodePrefix, data.CategoryCode)
	cdtsDeliveryDbDeliveryCategoryMappingIdKey := fmt.Sprintf("%s%v", cacheCdtsDeliveryDbDeliveryCategoryMappingIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, deliveryCategoryMappingRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.CategoryCode, data.CategoryName, data.PlatformMappings, data.PriceConfig, data.Status)
	}, cdtsDeliveryDbDeliveryCategoryMappingCategoryCodeKey, cdtsDeliveryDbDeliveryCategoryMappingIdKey)
	return ret, err
}

func (m *defaultDeliveryCategoryMappingModel) Update(ctx context.Context, newData *DeliveryCategoryMapping) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	cdtsDeliveryDbDeliveryCategoryMappingCategoryCodeKey := fmt.Sprintf("%s%v", cacheCdtsDeliveryDbDeliveryCategoryMappingCategoryCodePrefix, data.CategoryCode)
	cdtsDeliveryDbDeliveryCategoryMappingIdKey := fmt.Sprintf("%s%v", cacheCdtsDeliveryDbDeliveryCategoryMappingIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, deliveryCategoryMappingRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.CategoryCode, newData.CategoryName, newData.PlatformMappings, newData.PriceConfig, newData.Status, newData.Id)
	}, cdtsDeliveryDbDeliveryCategoryMappingCategoryCodeKey, cdtsDeliveryDbDeliveryCategoryMappingIdKey)
	return err
}

func (m *defaultDeliveryCategoryMappingModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheCdtsDeliveryDbDeliveryCategoryMappingIdPrefix, primary)
}

func (m *defaultDeliveryCategoryMappingModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", deliveryCategoryMappingRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultDeliveryCategoryMappingModel) tableName() string {
	return m.table
}
