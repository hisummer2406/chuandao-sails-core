// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	cityRegionMappingFieldNames          = builder.RawFieldNames(&CityRegionMapping{})
	cityRegionMappingRows                = strings.Join(cityRegionMappingFieldNames, ",")
	cityRegionMappingRowsExpectAutoSet   = strings.Join(stringx.Remove(cityRegionMappingFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	cityRegionMappingRowsWithPlaceHolder = strings.Join(stringx.Remove(cityRegionMappingFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheCdtsPlatformDbCityRegionMappingIdPrefix = "cache:cdtsPlatformDb:cityRegionMapping:id:"
)

type (
	cityRegionMappingModel interface {
		Insert(ctx context.Context, data *CityRegionMapping) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*CityRegionMapping, error)
		Update(ctx context.Context, data *CityRegionMapping) error
	}

	defaultCityRegionMappingModel struct {
		sqlc.CachedConn
		table string
	}

	CityRegionMapping struct {
		Id        uint64    `db:"id"`
		CityLevel uint64    `db:"city_level"`
		CityName  string    `db:"city_name"`
		PAdcode   int64     `db:"p_adcode"`
		Adcode    int64     `db:"adcode"`
		Citycode  string    `db:"citycode"`
		CreatedAt time.Time `db:"created_at"`
		UpdatedAt time.Time `db:"updated_at"`
	}
)

func newCityRegionMappingModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultCityRegionMappingModel {
	return &defaultCityRegionMappingModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`city_region_mapping`",
	}
}

func (m *defaultCityRegionMappingModel) FindOne(ctx context.Context, id uint64) (*CityRegionMapping, error) {
	cdtsPlatformDbCityRegionMappingIdKey := fmt.Sprintf("%s%v", cacheCdtsPlatformDbCityRegionMappingIdPrefix, id)
	var resp CityRegionMapping
	err := m.QueryRowCtx(ctx, &resp, cdtsPlatformDbCityRegionMappingIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", cityRegionMappingRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCityRegionMappingModel) Insert(ctx context.Context, data *CityRegionMapping) (sql.Result, error) {
	cdtsPlatformDbCityRegionMappingIdKey := fmt.Sprintf("%s%v", cacheCdtsPlatformDbCityRegionMappingIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, cityRegionMappingRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.CityLevel, data.CityName, data.PAdcode, data.Adcode, data.Citycode)
	}, cdtsPlatformDbCityRegionMappingIdKey)
	return ret, err
}

func (m *defaultCityRegionMappingModel) Update(ctx context.Context, data *CityRegionMapping) error {
	cdtsPlatformDbCityRegionMappingIdKey := fmt.Sprintf("%s%v", cacheCdtsPlatformDbCityRegionMappingIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, cityRegionMappingRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.CityLevel, data.CityName, data.PAdcode, data.Adcode, data.Citycode, data.Id)
	}, cdtsPlatformDbCityRegionMappingIdKey)
	return err
}

func (m *defaultCityRegionMappingModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheCdtsPlatformDbCityRegionMappingIdPrefix, primary)
}

func (m *defaultCityRegionMappingModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", cityRegionMappingRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultCityRegionMappingModel) tableName() string {
	return m.table
}
