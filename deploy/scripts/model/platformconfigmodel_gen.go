// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	platformConfigFieldNames          = builder.RawFieldNames(&PlatformConfig{})
	platformConfigRows                = strings.Join(platformConfigFieldNames, ",")
	platformConfigRowsExpectAutoSet   = strings.Join(stringx.Remove(platformConfigFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	platformConfigRowsWithPlaceHolder = strings.Join(stringx.Remove(platformConfigFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheCdtsPlatformDbPlatformConfigIdPrefix = "cache:cdtsPlatformDb:platformConfig:id:"
)

type (
	platformConfigModel interface {
		Insert(ctx context.Context, data *PlatformConfig) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*PlatformConfig, error)
		Update(ctx context.Context, data *PlatformConfig) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultPlatformConfigModel struct {
		sqlc.CachedConn
		table string
	}

	PlatformConfig struct {
		Id           uint64    `db:"id"`
		AppName      string    `db:"app_name"`
		AppId        string    `db:"app_id"`
		AppSecret    string    `db:"app_secret"`    // 应用Secret
		PlatformCode string    `db:"platform_code"` // 平台编码
		WebhookUrl   string    `db:"webhook_url"`   // 回调地址
		Status       int64     `db:"status"`        // 状态：1启用 0禁用
		Remark       string    `db:"remark"`        // 备注
		CreatedAt    time.Time `db:"created_at"`
		UpdatedAt    time.Time `db:"updated_at"`
	}
)

func newPlatformConfigModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultPlatformConfigModel {
	return &defaultPlatformConfigModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`platform_config`",
	}
}

func (m *defaultPlatformConfigModel) FindOne(ctx context.Context, id uint64) (*PlatformConfig, error) {
	cdtsPlatformDbPlatformConfigIdKey := fmt.Sprintf("%s%v", cacheCdtsPlatformDbPlatformConfigIdPrefix, id)
	var resp PlatformConfig
	err := m.QueryRowCtx(ctx, &resp, cdtsPlatformDbPlatformConfigIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", platformConfigRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPlatformConfigModel) Insert(ctx context.Context, data *PlatformConfig) (sql.Result, error) {
	cdtsPlatformDbPlatformConfigIdKey := fmt.Sprintf("%s%v", cacheCdtsPlatformDbPlatformConfigIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, platformConfigRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.AppName, data.AppId, data.AppSecret, data.PlatformCode, data.WebhookUrl, data.Status, data.Remark)
	}, cdtsPlatformDbPlatformConfigIdKey)
	return ret, err
}

func (m *defaultPlatformConfigModel) Update(ctx context.Context, data *PlatformConfig) error {
	cdtsPlatformDbPlatformConfigIdKey := fmt.Sprintf("%s%v", cacheCdtsPlatformDbPlatformConfigIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, platformConfigRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.AppName, data.AppId, data.AppSecret, data.PlatformCode, data.WebhookUrl, data.Status, data.Remark, data.Id)
	}, cdtsPlatformDbPlatformConfigIdKey)
	return err
}

func (m *defaultPlatformConfigModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheCdtsPlatformDbPlatformConfigIdPrefix, primary)
}

func (m *defaultPlatformConfigModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", platformConfigRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultPlatformConfigModel) tableName() string {
	return m.table
}
